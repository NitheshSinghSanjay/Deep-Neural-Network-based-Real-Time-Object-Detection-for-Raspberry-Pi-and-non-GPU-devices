node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "input_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 300
        }
        dim {
          size: 480
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "confidence_thresh"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "iou_threshold"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.44999998807907104
      }
    }
  }
}
node {
  name: "top_k"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "normalize_coords"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "img_height"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 300.0
      }
    }
  }
}
node {
  name: "img_width"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 480.0
      }
    }
  }
}
node {
  name: "nms_max_output_size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 400
      }
    }
  }
}
node {
  name: "conv2d_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1380131095647812
      }
    }
  }
}
node {
  name: "conv2d_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1380131095647812
      }
    }
  }
}
node {
  name: "conv2d_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3872193
    }
  }
}
node {
  name: "conv2d_1/random_uniform/sub"
  op: "Sub"
  input: "conv2d_1/random_uniform/max"
  input: "conv2d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/random_uniform/mul"
  op: "Mul"
  input: "conv2d_1/random_uniform/RandomUniform"
  input: "conv2d_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/random_uniform"
  op: "Add"
  input: "conv2d_1/random_uniform/mul"
  input: "conv2d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/kernel/Assign"
  op: "Assign"
  input: "conv2d_1/kernel"
  input: "conv2d_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/kernel/read"
  op: "Identity"
  input: "conv2d_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_1/bias/Assign"
  op: "Assign"
  input: "conv2d_1/bias"
  input: "conv2d_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/bias/read"
  op: "Identity"
  input: "conv2d_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
}
node {
  name: "conv2d_1/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_1/convolution"
  op: "Conv2D"
  input: "input_1"
  input: "conv2d_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_1/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_1/convolution"
  input: "conv2d_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_1/Relu6"
  op: "Relu6"
  input: "conv2d_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "conv2d_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "conv2d_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5283703
    }
  }
}
node {
  name: "conv2d_2/random_uniform/sub"
  op: "Sub"
  input: "conv2d_2/random_uniform/max"
  input: "conv2d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/random_uniform/mul"
  op: "Mul"
  input: "conv2d_2/random_uniform/RandomUniform"
  input: "conv2d_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/random_uniform"
  op: "Add"
  input: "conv2d_2/random_uniform/mul"
  input: "conv2d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/kernel/Assign"
  op: "Assign"
  input: "conv2d_2/kernel"
  input: "conv2d_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/kernel/read"
  op: "Identity"
  input: "conv2d_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_2/bias/Assign"
  op: "Assign"
  input: "conv2d_2/bias"
  input: "conv2d_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/bias/read"
  op: "Identity"
  input: "conv2d_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
}
node {
  name: "conv2d_2/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_2/convolution"
  op: "Conv2D"
  input: "re_lu_1/Relu6"
  input: "conv2d_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_2/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_2/convolution"
  input: "conv2d_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_2/Relu6"
  op: "Relu6"
  input: "conv2d_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.14213381707668304
      }
    }
  }
}
node {
  name: "depthwise_conv2d_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.14213381707668304
      }
    }
  }
}
node {
  name: "depthwise_conv2d_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4767061
    }
  }
}
node {
  name: "depthwise_conv2d_1/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_1/random_uniform/max"
  input: "depthwise_conv2d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_1/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_1/random_uniform/RandomUniform"
  input: "depthwise_conv2d_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_1/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_1/random_uniform/mul"
  input: "depthwise_conv2d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_1/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_1/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_1/depthwise_kernel"
  input: "depthwise_conv2d_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_1/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_1/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_1/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_1/bias"
  input: "depthwise_conv2d_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_1/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_1/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_1/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_1/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_1/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_2/Relu6"
  input: "depthwise_conv2d_1/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_1/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_1/depthwise"
  input: "depthwise_conv2d_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_3/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3535533845424652
      }
    }
  }
}
node {
  name: "conv2d_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3535533845424652
      }
    }
  }
}
node {
  name: "conv2d_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1177740
    }
  }
}
node {
  name: "conv2d_3/random_uniform/sub"
  op: "Sub"
  input: "conv2d_3/random_uniform/max"
  input: "conv2d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/random_uniform/mul"
  op: "Mul"
  input: "conv2d_3/random_uniform/RandomUniform"
  input: "conv2d_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/random_uniform"
  op: "Add"
  input: "conv2d_3/random_uniform/mul"
  input: "conv2d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/kernel/Assign"
  op: "Assign"
  input: "conv2d_3/kernel"
  input: "conv2d_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/kernel/read"
  op: "Identity"
  input: "conv2d_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_3/bias/Assign"
  op: "Assign"
  input: "conv2d_3/bias"
  input: "conv2d_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/bias/read"
  op: "Identity"
  input: "conv2d_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
}
node {
  name: "conv2d_3/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_3/convolution"
  op: "Conv2D"
  input: "re_lu_3/Relu6"
  input: "conv2d_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_3/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_3/convolution"
  input: "conv2d_3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_4/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2314550280570984
      }
    }
  }
}
node {
  name: "conv2d_4/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2314550280570984
      }
    }
  }
}
node {
  name: "conv2d_4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3144265
    }
  }
}
node {
  name: "conv2d_4/random_uniform/sub"
  op: "Sub"
  input: "conv2d_4/random_uniform/max"
  input: "conv2d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/random_uniform/mul"
  op: "Mul"
  input: "conv2d_4/random_uniform/RandomUniform"
  input: "conv2d_4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/random_uniform"
  op: "Add"
  input: "conv2d_4/random_uniform/mul"
  input: "conv2d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_4/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/kernel/Assign"
  op: "Assign"
  input: "conv2d_4/kernel"
  input: "conv2d_4/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/kernel/read"
  op: "Identity"
  input: "conv2d_4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "conv2d_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_4/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_4/bias/Assign"
  op: "Assign"
  input: "conv2d_4/bias"
  input: "conv2d_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/bias/read"
  op: "Identity"
  input: "conv2d_4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
}
node {
  name: "conv2d_4/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_4/convolution"
  op: "Conv2D"
  input: "conv2d_3/BiasAdd"
  input: "conv2d_4/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_4/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_4/convolution"
  input: "conv2d_4/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_4/Relu6"
  op: "Relu6"
  input: "conv2d_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08290266990661621
      }
    }
  }
}
node {
  name: "depthwise_conv2d_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08290266990661621
      }
    }
  }
}
node {
  name: "depthwise_conv2d_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2211242
    }
  }
}
node {
  name: "depthwise_conv2d_2/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_2/random_uniform/max"
  input: "depthwise_conv2d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_2/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_2/random_uniform/RandomUniform"
  input: "depthwise_conv2d_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_2/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_2/random_uniform/mul"
  input: "depthwise_conv2d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_2/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_2/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_2/depthwise_kernel"
  input: "depthwise_conv2d_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_2/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_2/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_2/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_2/bias"
  input: "depthwise_conv2d_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_2/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_2/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_2/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_2/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_2/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_4/Relu6"
  input: "depthwise_conv2d_2/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_2/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_2/depthwise"
  input: "depthwise_conv2d_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_5/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.22360679507255554
      }
    }
  }
}
node {
  name: "conv2d_5/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.22360679507255554
      }
    }
  }
}
node {
  name: "conv2d_5/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_5/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4297397
    }
  }
}
node {
  name: "conv2d_5/random_uniform/sub"
  op: "Sub"
  input: "conv2d_5/random_uniform/max"
  input: "conv2d_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/random_uniform/mul"
  op: "Mul"
  input: "conv2d_5/random_uniform/RandomUniform"
  input: "conv2d_5/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/random_uniform"
  op: "Add"
  input: "conv2d_5/random_uniform/mul"
  input: "conv2d_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_5/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/kernel/Assign"
  op: "Assign"
  input: "conv2d_5/kernel"
  input: "conv2d_5/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/kernel/read"
  op: "Identity"
  input: "conv2d_5/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "conv2d_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_5/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_5/bias/Assign"
  op: "Assign"
  input: "conv2d_5/bias"
  input: "conv2d_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/bias/read"
  op: "Identity"
  input: "conv2d_5/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
}
node {
  name: "conv2d_5/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_5/convolution"
  op: "Conv2D"
  input: "re_lu_5/Relu6"
  input: "conv2d_5/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_5/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_5/convolution"
  input: "conv2d_5/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_6/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\030\000\000\000\220\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.18898223340511322
      }
    }
  }
}
node {
  name: "conv2d_6/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.18898223340511322
      }
    }
  }
}
node {
  name: "conv2d_6/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_6/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9676289
    }
  }
}
node {
  name: "conv2d_6/random_uniform/sub"
  op: "Sub"
  input: "conv2d_6/random_uniform/max"
  input: "conv2d_6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/random_uniform/mul"
  op: "Mul"
  input: "conv2d_6/random_uniform/RandomUniform"
  input: "conv2d_6/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/random_uniform"
  op: "Add"
  input: "conv2d_6/random_uniform/mul"
  input: "conv2d_6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_6/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/kernel/Assign"
  op: "Assign"
  input: "conv2d_6/kernel"
  input: "conv2d_6/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/kernel/read"
  op: "Identity"
  input: "conv2d_6/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "conv2d_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_6/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_6/bias/Assign"
  op: "Assign"
  input: "conv2d_6/bias"
  input: "conv2d_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/bias/read"
  op: "Identity"
  input: "conv2d_6/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
}
node {
  name: "conv2d_6/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_6/convolution"
  op: "Conv2D"
  input: "conv2d_5/BiasAdd"
  input: "conv2d_6/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_6/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_6/convolution"
  input: "conv2d_6/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_6/Relu6"
  op: "Relu6"
  input: "conv2d_6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\220\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06780634820461273
      }
    }
  }
}
node {
  name: "depthwise_conv2d_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06780634820461273
      }
    }
  }
}
node {
  name: "depthwise_conv2d_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 105605
    }
  }
}
node {
  name: "depthwise_conv2d_3/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_3/random_uniform/max"
  input: "depthwise_conv2d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_3/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_3/random_uniform/RandomUniform"
  input: "depthwise_conv2d_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_3/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_3/random_uniform/mul"
  input: "depthwise_conv2d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_3/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 144
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_3/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_3/depthwise_kernel"
  input: "depthwise_conv2d_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_3/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_3/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_3/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_3/bias"
  input: "depthwise_conv2d_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_3/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_3/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_3/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\220\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_3/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_3/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_6/Relu6"
  input: "depthwise_conv2d_3/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_3/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_3/depthwise"
  input: "depthwise_conv2d_3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_7/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_7/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.18898223340511322
      }
    }
  }
}
node {
  name: "conv2d_7/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.18898223340511322
      }
    }
  }
}
node {
  name: "conv2d_7/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_7/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7303434
    }
  }
}
node {
  name: "conv2d_7/random_uniform/sub"
  op: "Sub"
  input: "conv2d_7/random_uniform/max"
  input: "conv2d_7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/random_uniform/mul"
  op: "Mul"
  input: "conv2d_7/random_uniform/RandomUniform"
  input: "conv2d_7/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/random_uniform"
  op: "Add"
  input: "conv2d_7/random_uniform/mul"
  input: "conv2d_7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_7/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 144
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_7/kernel/Assign"
  op: "Assign"
  input: "conv2d_7/kernel"
  input: "conv2d_7/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_7/kernel/read"
  op: "Identity"
  input: "conv2d_7/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "conv2d_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_7/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_7/bias/Assign"
  op: "Assign"
  input: "conv2d_7/bias"
  input: "conv2d_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_7/bias/read"
  op: "Identity"
  input: "conv2d_7/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/bias"
      }
    }
  }
}
node {
  name: "conv2d_7/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_7/convolution"
  op: "Conv2D"
  input: "re_lu_7/Relu6"
  input: "conv2d_7/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_7/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_7/convolution"
  input: "conv2d_7/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_1/add"
  op: "Add"
  input: "conv2d_7/BiasAdd"
  input: "conv2d_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\030\000\000\000\220\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_8/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.18898223340511322
      }
    }
  }
}
node {
  name: "conv2d_8/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.18898223340511322
      }
    }
  }
}
node {
  name: "conv2d_8/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_8/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6288219
    }
  }
}
node {
  name: "conv2d_8/random_uniform/sub"
  op: "Sub"
  input: "conv2d_8/random_uniform/max"
  input: "conv2d_8/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/random_uniform/mul"
  op: "Mul"
  input: "conv2d_8/random_uniform/RandomUniform"
  input: "conv2d_8/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/random_uniform"
  op: "Add"
  input: "conv2d_8/random_uniform/mul"
  input: "conv2d_8/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_8/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_8/kernel/Assign"
  op: "Assign"
  input: "conv2d_8/kernel"
  input: "conv2d_8/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_8/kernel/read"
  op: "Identity"
  input: "conv2d_8/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "conv2d_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_8/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_8/bias/Assign"
  op: "Assign"
  input: "conv2d_8/bias"
  input: "conv2d_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_8/bias/read"
  op: "Identity"
  input: "conv2d_8/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/bias"
      }
    }
  }
}
node {
  name: "conv2d_8/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_8/convolution"
  op: "Conv2D"
  input: "add_1/add"
  input: "conv2d_8/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_8/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_8/convolution"
  input: "conv2d_8/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_8/Relu6"
  op: "Relu6"
  input: "conv2d_8/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_4/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\220\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_4/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06780634820461273
      }
    }
  }
}
node {
  name: "depthwise_conv2d_4/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06780634820461273
      }
    }
  }
}
node {
  name: "depthwise_conv2d_4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 725675
    }
  }
}
node {
  name: "depthwise_conv2d_4/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_4/random_uniform/max"
  input: "depthwise_conv2d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_4/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_4/random_uniform/RandomUniform"
  input: "depthwise_conv2d_4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_4/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_4/random_uniform/mul"
  input: "depthwise_conv2d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_4/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 144
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_4/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_4/depthwise_kernel"
  input: "depthwise_conv2d_4/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_4/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_4/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_4/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_4/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_4/bias"
  input: "depthwise_conv2d_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_4/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_4/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_4/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\220\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_4/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_4/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_8/Relu6"
  input: "depthwise_conv2d_4/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_4/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_4/depthwise"
  input: "depthwise_conv2d_4/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_9/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_9/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_9/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.18463723361492157
      }
    }
  }
}
node {
  name: "conv2d_9/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.18463723361492157
      }
    }
  }
}
node {
  name: "conv2d_9/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_9/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5121456
    }
  }
}
node {
  name: "conv2d_9/random_uniform/sub"
  op: "Sub"
  input: "conv2d_9/random_uniform/max"
  input: "conv2d_9/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_9/random_uniform/mul"
  op: "Mul"
  input: "conv2d_9/random_uniform/RandomUniform"
  input: "conv2d_9/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_9/random_uniform"
  op: "Add"
  input: "conv2d_9/random_uniform/mul"
  input: "conv2d_9/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_9/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 144
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_9/kernel/Assign"
  op: "Assign"
  input: "conv2d_9/kernel"
  input: "conv2d_9/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_9/kernel/read"
  op: "Identity"
  input: "conv2d_9/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
}
node {
  name: "conv2d_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_9/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_9/bias/Assign"
  op: "Assign"
  input: "conv2d_9/bias"
  input: "conv2d_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_9/bias/read"
  op: "Identity"
  input: "conv2d_9/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/bias"
      }
    }
  }
}
node {
  name: "conv2d_9/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_9/convolution"
  op: "Conv2D"
  input: "re_lu_9/Relu6"
  input: "conv2d_9/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_9/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_9/convolution"
  input: "conv2d_9/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_10/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_10/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_10/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_10/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_10/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5447255
    }
  }
}
node {
  name: "conv2d_10/random_uniform/sub"
  op: "Sub"
  input: "conv2d_10/random_uniform/max"
  input: "conv2d_10/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_10/random_uniform/mul"
  op: "Mul"
  input: "conv2d_10/random_uniform/RandomUniform"
  input: "conv2d_10/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_10/random_uniform"
  op: "Add"
  input: "conv2d_10/random_uniform/mul"
  input: "conv2d_10/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_10/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_10/kernel/Assign"
  op: "Assign"
  input: "conv2d_10/kernel"
  input: "conv2d_10/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_10/kernel/read"
  op: "Identity"
  input: "conv2d_10/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
}
node {
  name: "conv2d_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_10/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_10/bias/Assign"
  op: "Assign"
  input: "conv2d_10/bias"
  input: "conv2d_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_10/bias/read"
  op: "Identity"
  input: "conv2d_10/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/bias"
      }
    }
  }
}
node {
  name: "conv2d_10/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_10/convolution"
  op: "Conv2D"
  input: "conv2d_9/BiasAdd"
  input: "conv2d_10/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_10/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_10/convolution"
  input: "conv2d_10/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_10/Relu6"
  op: "Relu6"
  input: "conv2d_10/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_5/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_5/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05877270922064781
      }
    }
  }
}
node {
  name: "depthwise_conv2d_5/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05877270922064781
      }
    }
  }
}
node {
  name: "depthwise_conv2d_5/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_5/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5168371
    }
  }
}
node {
  name: "depthwise_conv2d_5/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_5/random_uniform/max"
  input: "depthwise_conv2d_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_5/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_5/random_uniform/RandomUniform"
  input: "depthwise_conv2d_5/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_5/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_5/random_uniform/mul"
  input: "depthwise_conv2d_5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_5/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_5/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_5/depthwise_kernel"
  input: "depthwise_conv2d_5/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_5/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_5/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_5/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_5/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_5/bias"
  input: "depthwise_conv2d_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_5/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_5/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_5/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_5/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_5/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_5/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_10/Relu6"
  input: "depthwise_conv2d_5/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_5/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_5/depthwise"
  input: "depthwise_conv2d_5/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_11/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_11/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_11/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_11/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_11/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_11/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6873758
    }
  }
}
node {
  name: "conv2d_11/random_uniform/sub"
  op: "Sub"
  input: "conv2d_11/random_uniform/max"
  input: "conv2d_11/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_11/random_uniform/mul"
  op: "Mul"
  input: "conv2d_11/random_uniform/RandomUniform"
  input: "conv2d_11/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_11/random_uniform"
  op: "Add"
  input: "conv2d_11/random_uniform/mul"
  input: "conv2d_11/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_11/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_11/kernel/Assign"
  op: "Assign"
  input: "conv2d_11/kernel"
  input: "conv2d_11/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_11/kernel/read"
  op: "Identity"
  input: "conv2d_11/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
}
node {
  name: "conv2d_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_11/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_11/bias/Assign"
  op: "Assign"
  input: "conv2d_11/bias"
  input: "conv2d_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_11/bias/read"
  op: "Identity"
  input: "conv2d_11/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/bias"
      }
    }
  }
}
node {
  name: "conv2d_11/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_11/convolution"
  op: "Conv2D"
  input: "re_lu_11/Relu6"
  input: "conv2d_11/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_11/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_11/convolution"
  input: "conv2d_11/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_2/add"
  op: "Add"
  input: "conv2d_11/BiasAdd"
  input: "conv2d_9/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_12/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_12/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_12/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_12/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_12/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3813729
    }
  }
}
node {
  name: "conv2d_12/random_uniform/sub"
  op: "Sub"
  input: "conv2d_12/random_uniform/max"
  input: "conv2d_12/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_12/random_uniform/mul"
  op: "Mul"
  input: "conv2d_12/random_uniform/RandomUniform"
  input: "conv2d_12/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_12/random_uniform"
  op: "Add"
  input: "conv2d_12/random_uniform/mul"
  input: "conv2d_12/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_12/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_12/kernel/Assign"
  op: "Assign"
  input: "conv2d_12/kernel"
  input: "conv2d_12/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_12/kernel/read"
  op: "Identity"
  input: "conv2d_12/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
}
node {
  name: "conv2d_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_12/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_12/bias/Assign"
  op: "Assign"
  input: "conv2d_12/bias"
  input: "conv2d_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_12/bias/read"
  op: "Identity"
  input: "conv2d_12/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/bias"
      }
    }
  }
}
node {
  name: "conv2d_12/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_12/convolution"
  op: "Conv2D"
  input: "add_2/add"
  input: "conv2d_12/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_12/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_12/convolution"
  input: "conv2d_12/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_12/Relu6"
  op: "Relu6"
  input: "conv2d_12/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_6/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_6/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05877270922064781
      }
    }
  }
}
node {
  name: "depthwise_conv2d_6/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05877270922064781
      }
    }
  }
}
node {
  name: "depthwise_conv2d_6/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_6/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7857362
    }
  }
}
node {
  name: "depthwise_conv2d_6/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_6/random_uniform/max"
  input: "depthwise_conv2d_6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_6/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_6/random_uniform/RandomUniform"
  input: "depthwise_conv2d_6/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_6/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_6/random_uniform/mul"
  input: "depthwise_conv2d_6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_6/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_6/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_6/depthwise_kernel"
  input: "depthwise_conv2d_6/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_6/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_6/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_6/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_6/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_6/bias"
  input: "depthwise_conv2d_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_6/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_6/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_6/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_6/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_6/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_6/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_12/Relu6"
  input: "depthwise_conv2d_6/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_6/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_6/depthwise"
  input: "depthwise_conv2d_6/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_13/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_13/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_13/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_13/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_13/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7588206
    }
  }
}
node {
  name: "conv2d_13/random_uniform/sub"
  op: "Sub"
  input: "conv2d_13/random_uniform/max"
  input: "conv2d_13/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_13/random_uniform/mul"
  op: "Mul"
  input: "conv2d_13/random_uniform/RandomUniform"
  input: "conv2d_13/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_13/random_uniform"
  op: "Add"
  input: "conv2d_13/random_uniform/mul"
  input: "conv2d_13/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_13/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_13/kernel/Assign"
  op: "Assign"
  input: "conv2d_13/kernel"
  input: "conv2d_13/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_13/kernel/read"
  op: "Identity"
  input: "conv2d_13/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
}
node {
  name: "conv2d_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_13/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_13/bias/Assign"
  op: "Assign"
  input: "conv2d_13/bias"
  input: "conv2d_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_13/bias/read"
  op: "Identity"
  input: "conv2d_13/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/bias"
      }
    }
  }
}
node {
  name: "conv2d_13/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_13/convolution"
  op: "Conv2D"
  input: "re_lu_13/Relu6"
  input: "conv2d_13/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_13/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_13/convolution"
  input: "conv2d_13/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_3/add"
  op: "Add"
  input: "conv2d_13/BiasAdd"
  input: "add_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_14/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_14/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_14/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16366341710090637
      }
    }
  }
}
node {
  name: "conv2d_14/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_14/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7944051
    }
  }
}
node {
  name: "conv2d_14/random_uniform/sub"
  op: "Sub"
  input: "conv2d_14/random_uniform/max"
  input: "conv2d_14/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_14/random_uniform/mul"
  op: "Mul"
  input: "conv2d_14/random_uniform/RandomUniform"
  input: "conv2d_14/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_14/random_uniform"
  op: "Add"
  input: "conv2d_14/random_uniform/mul"
  input: "conv2d_14/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_14/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_14/kernel/Assign"
  op: "Assign"
  input: "conv2d_14/kernel"
  input: "conv2d_14/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_14/kernel/read"
  op: "Identity"
  input: "conv2d_14/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
}
node {
  name: "conv2d_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_14/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_14/bias/Assign"
  op: "Assign"
  input: "conv2d_14/bias"
  input: "conv2d_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_14/bias/read"
  op: "Identity"
  input: "conv2d_14/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/bias"
      }
    }
  }
}
node {
  name: "conv2d_14/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_14/convolution"
  op: "Conv2D"
  input: "add_3/add"
  input: "conv2d_14/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_14/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_14/convolution"
  input: "conv2d_14/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_14/Relu6"
  op: "Relu6"
  input: "conv2d_14/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_7/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_7/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05877270922064781
      }
    }
  }
}
node {
  name: "depthwise_conv2d_7/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05877270922064781
      }
    }
  }
}
node {
  name: "depthwise_conv2d_7/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_7/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6588876
    }
  }
}
node {
  name: "depthwise_conv2d_7/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_7/random_uniform/max"
  input: "depthwise_conv2d_7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_7/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_7/random_uniform/RandomUniform"
  input: "depthwise_conv2d_7/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_7/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_7/random_uniform/mul"
  input: "depthwise_conv2d_7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_7/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_7/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_7/depthwise_kernel"
  input: "depthwise_conv2d_7/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_7/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_7/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_7/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_7/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_7/bias"
  input: "depthwise_conv2d_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_7/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_7/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_7/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_7/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_7/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_7/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_14/Relu6"
  input: "depthwise_conv2d_7/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_7/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_7/depthwise"
  input: "depthwise_conv2d_7/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_15/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_15/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_15/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1530931144952774
      }
    }
  }
}
node {
  name: "conv2d_15/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1530931144952774
      }
    }
  }
}
node {
  name: "conv2d_15/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_15/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8467690
    }
  }
}
node {
  name: "conv2d_15/random_uniform/sub"
  op: "Sub"
  input: "conv2d_15/random_uniform/max"
  input: "conv2d_15/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_15/random_uniform/mul"
  op: "Mul"
  input: "conv2d_15/random_uniform/RandomUniform"
  input: "conv2d_15/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_15/random_uniform"
  op: "Add"
  input: "conv2d_15/random_uniform/mul"
  input: "conv2d_15/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_15/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_15/kernel/Assign"
  op: "Assign"
  input: "conv2d_15/kernel"
  input: "conv2d_15/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_15/kernel/read"
  op: "Identity"
  input: "conv2d_15/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
}
node {
  name: "conv2d_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_15/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_15/bias/Assign"
  op: "Assign"
  input: "conv2d_15/bias"
  input: "conv2d_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_15/bias/read"
  op: "Identity"
  input: "conv2d_15/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/bias"
      }
    }
  }
}
node {
  name: "conv2d_15/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_15/convolution"
  op: "Conv2D"
  input: "re_lu_15/Relu6"
  input: "conv2d_15/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_15/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_15/convolution"
  input: "conv2d_15/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_16/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_16/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_16/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_16/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_16/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2002916
    }
  }
}
node {
  name: "conv2d_16/random_uniform/sub"
  op: "Sub"
  input: "conv2d_16/random_uniform/max"
  input: "conv2d_16/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_16/random_uniform/mul"
  op: "Mul"
  input: "conv2d_16/random_uniform/RandomUniform"
  input: "conv2d_16/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_16/random_uniform"
  op: "Add"
  input: "conv2d_16/random_uniform/mul"
  input: "conv2d_16/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_16/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_16/kernel/Assign"
  op: "Assign"
  input: "conv2d_16/kernel"
  input: "conv2d_16/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_16/kernel/read"
  op: "Identity"
  input: "conv2d_16/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
}
node {
  name: "conv2d_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_16/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_16/bias/Assign"
  op: "Assign"
  input: "conv2d_16/bias"
  input: "conv2d_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_16/bias/read"
  op: "Identity"
  input: "conv2d_16/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/bias"
      }
    }
  }
}
node {
  name: "conv2d_16/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_16/convolution"
  op: "Conv2D"
  input: "conv2d_15/BiasAdd"
  input: "conv2d_16/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_16/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_16/convolution"
  input: "conv2d_16/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_16/Relu6"
  op: "Relu6"
  input: "conv2d_16/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_8/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_8/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04161251708865166
      }
    }
  }
}
node {
  name: "depthwise_conv2d_8/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04161251708865166
      }
    }
  }
}
node {
  name: "depthwise_conv2d_8/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_8/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5178444
    }
  }
}
node {
  name: "depthwise_conv2d_8/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_8/random_uniform/max"
  input: "depthwise_conv2d_8/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_8/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_8/random_uniform/RandomUniform"
  input: "depthwise_conv2d_8/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_8/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_8/random_uniform/mul"
  input: "depthwise_conv2d_8/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_8/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_8/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_8/depthwise_kernel"
  input: "depthwise_conv2d_8/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_8/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_8/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_8/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_8/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_8/bias"
  input: "depthwise_conv2d_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_8/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_8/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_8/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_8/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_8/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_8/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_8/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_16/Relu6"
  input: "depthwise_conv2d_8/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_8/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_8/depthwise"
  input: "depthwise_conv2d_8/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_17/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_8/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_17/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\001\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_17/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_17/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_17/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_17/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2575952
    }
  }
}
node {
  name: "conv2d_17/random_uniform/sub"
  op: "Sub"
  input: "conv2d_17/random_uniform/max"
  input: "conv2d_17/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_17/random_uniform/mul"
  op: "Mul"
  input: "conv2d_17/random_uniform/RandomUniform"
  input: "conv2d_17/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_17/random_uniform"
  op: "Add"
  input: "conv2d_17/random_uniform/mul"
  input: "conv2d_17/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_17/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_17/kernel/Assign"
  op: "Assign"
  input: "conv2d_17/kernel"
  input: "conv2d_17/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_17/kernel/read"
  op: "Identity"
  input: "conv2d_17/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
}
node {
  name: "conv2d_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_17/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_17/bias/Assign"
  op: "Assign"
  input: "conv2d_17/bias"
  input: "conv2d_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_17/bias/read"
  op: "Identity"
  input: "conv2d_17/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/bias"
      }
    }
  }
}
node {
  name: "conv2d_17/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_17/convolution"
  op: "Conv2D"
  input: "re_lu_17/Relu6"
  input: "conv2d_17/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_17/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_17/convolution"
  input: "conv2d_17/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_4/add"
  op: "Add"
  input: "conv2d_17/BiasAdd"
  input: "conv2d_15/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_18/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_18/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_18/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_18/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_18/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3489703
    }
  }
}
node {
  name: "conv2d_18/random_uniform/sub"
  op: "Sub"
  input: "conv2d_18/random_uniform/max"
  input: "conv2d_18/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_18/random_uniform/mul"
  op: "Mul"
  input: "conv2d_18/random_uniform/RandomUniform"
  input: "conv2d_18/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_18/random_uniform"
  op: "Add"
  input: "conv2d_18/random_uniform/mul"
  input: "conv2d_18/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_18/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_18/kernel/Assign"
  op: "Assign"
  input: "conv2d_18/kernel"
  input: "conv2d_18/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_18/kernel/read"
  op: "Identity"
  input: "conv2d_18/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
}
node {
  name: "conv2d_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_18/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_18/bias/Assign"
  op: "Assign"
  input: "conv2d_18/bias"
  input: "conv2d_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_18/bias/read"
  op: "Identity"
  input: "conv2d_18/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/bias"
      }
    }
  }
}
node {
  name: "conv2d_18/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_18/convolution"
  op: "Conv2D"
  input: "add_4/add"
  input: "conv2d_18/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_18/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_18/convolution"
  input: "conv2d_18/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_18/Relu6"
  op: "Relu6"
  input: "conv2d_18/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_9/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_9/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04161251708865166
      }
    }
  }
}
node {
  name: "depthwise_conv2d_9/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04161251708865166
      }
    }
  }
}
node {
  name: "depthwise_conv2d_9/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_9/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3747833
    }
  }
}
node {
  name: "depthwise_conv2d_9/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_9/random_uniform/max"
  input: "depthwise_conv2d_9/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_9/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_9/random_uniform/RandomUniform"
  input: "depthwise_conv2d_9/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_9/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_9/random_uniform/mul"
  input: "depthwise_conv2d_9/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_9/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_9/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_9/depthwise_kernel"
  input: "depthwise_conv2d_9/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_9/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_9/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_9/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_9/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_9/bias"
  input: "depthwise_conv2d_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_9/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_9/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_9/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_9/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_9/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_9/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_9/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_18/Relu6"
  input: "depthwise_conv2d_9/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_9/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_9/depthwise"
  input: "depthwise_conv2d_9/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_19/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_9/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_19/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\001\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_19/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_19/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_19/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_19/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6180575
    }
  }
}
node {
  name: "conv2d_19/random_uniform/sub"
  op: "Sub"
  input: "conv2d_19/random_uniform/max"
  input: "conv2d_19/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_19/random_uniform/mul"
  op: "Mul"
  input: "conv2d_19/random_uniform/RandomUniform"
  input: "conv2d_19/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_19/random_uniform"
  op: "Add"
  input: "conv2d_19/random_uniform/mul"
  input: "conv2d_19/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_19/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_19/kernel/Assign"
  op: "Assign"
  input: "conv2d_19/kernel"
  input: "conv2d_19/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_19/kernel/read"
  op: "Identity"
  input: "conv2d_19/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
}
node {
  name: "conv2d_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_19/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_19/bias/Assign"
  op: "Assign"
  input: "conv2d_19/bias"
  input: "conv2d_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_19/bias/read"
  op: "Identity"
  input: "conv2d_19/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/bias"
      }
    }
  }
}
node {
  name: "conv2d_19/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_19/convolution"
  op: "Conv2D"
  input: "re_lu_19/Relu6"
  input: "conv2d_19/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_19/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_19/convolution"
  input: "conv2d_19/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_5/add"
  op: "Add"
  input: "conv2d_19/BiasAdd"
  input: "add_4/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_20/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_20/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_20/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_20/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_20/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3499047
    }
  }
}
node {
  name: "conv2d_20/random_uniform/sub"
  op: "Sub"
  input: "conv2d_20/random_uniform/max"
  input: "conv2d_20/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_20/random_uniform/mul"
  op: "Mul"
  input: "conv2d_20/random_uniform/RandomUniform"
  input: "conv2d_20/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_20/random_uniform"
  op: "Add"
  input: "conv2d_20/random_uniform/mul"
  input: "conv2d_20/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_20/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_20/kernel/Assign"
  op: "Assign"
  input: "conv2d_20/kernel"
  input: "conv2d_20/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_20/kernel/read"
  op: "Identity"
  input: "conv2d_20/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
}
node {
  name: "conv2d_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_20/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_20/bias/Assign"
  op: "Assign"
  input: "conv2d_20/bias"
  input: "conv2d_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_20/bias/read"
  op: "Identity"
  input: "conv2d_20/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/bias"
      }
    }
  }
}
node {
  name: "conv2d_20/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_20/convolution"
  op: "Conv2D"
  input: "add_5/add"
  input: "conv2d_20/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_20/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_20/convolution"
  input: "conv2d_20/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_20/Relu6"
  op: "Relu6"
  input: "conv2d_20/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_10/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_10/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04161251708865166
      }
    }
  }
}
node {
  name: "depthwise_conv2d_10/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04161251708865166
      }
    }
  }
}
node {
  name: "depthwise_conv2d_10/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_10/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5800730
    }
  }
}
node {
  name: "depthwise_conv2d_10/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_10/random_uniform/max"
  input: "depthwise_conv2d_10/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_10/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_10/random_uniform/RandomUniform"
  input: "depthwise_conv2d_10/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_10/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_10/random_uniform/mul"
  input: "depthwise_conv2d_10/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_10/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_10/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_10/depthwise_kernel"
  input: "depthwise_conv2d_10/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_10/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_10/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_10/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_10/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_10/bias"
  input: "depthwise_conv2d_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_10/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_10/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_10/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_10/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_10/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_10/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_10/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_20/Relu6"
  input: "depthwise_conv2d_10/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_10/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_10/depthwise"
  input: "depthwise_conv2d_10/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_21/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_10/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_21/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\001\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_21/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_21/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_21/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_21/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 565942
    }
  }
}
node {
  name: "conv2d_21/random_uniform/sub"
  op: "Sub"
  input: "conv2d_21/random_uniform/max"
  input: "conv2d_21/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_21/random_uniform/mul"
  op: "Mul"
  input: "conv2d_21/random_uniform/RandomUniform"
  input: "conv2d_21/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_21/random_uniform"
  op: "Add"
  input: "conv2d_21/random_uniform/mul"
  input: "conv2d_21/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_21/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_21/kernel/Assign"
  op: "Assign"
  input: "conv2d_21/kernel"
  input: "conv2d_21/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_21/kernel/read"
  op: "Identity"
  input: "conv2d_21/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
}
node {
  name: "conv2d_21/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_21/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_21/bias/Assign"
  op: "Assign"
  input: "conv2d_21/bias"
  input: "conv2d_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_21/bias/read"
  op: "Identity"
  input: "conv2d_21/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/bias"
      }
    }
  }
}
node {
  name: "conv2d_21/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_21/convolution"
  op: "Conv2D"
  input: "re_lu_21/Relu6"
  input: "conv2d_21/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_21/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_21/convolution"
  input: "conv2d_21/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_6/add"
  op: "Add"
  input: "conv2d_21/BiasAdd"
  input: "add_5/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_22/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_22/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_22/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1157275140285492
      }
    }
  }
}
node {
  name: "conv2d_22/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_22/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 487479
    }
  }
}
node {
  name: "conv2d_22/random_uniform/sub"
  op: "Sub"
  input: "conv2d_22/random_uniform/max"
  input: "conv2d_22/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_22/random_uniform/mul"
  op: "Mul"
  input: "conv2d_22/random_uniform/RandomUniform"
  input: "conv2d_22/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_22/random_uniform"
  op: "Add"
  input: "conv2d_22/random_uniform/mul"
  input: "conv2d_22/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_22/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_22/kernel/Assign"
  op: "Assign"
  input: "conv2d_22/kernel"
  input: "conv2d_22/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_22/kernel/read"
  op: "Identity"
  input: "conv2d_22/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
}
node {
  name: "conv2d_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_22/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_22/bias/Assign"
  op: "Assign"
  input: "conv2d_22/bias"
  input: "conv2d_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_22/bias/read"
  op: "Identity"
  input: "conv2d_22/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/bias"
      }
    }
  }
}
node {
  name: "conv2d_22/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_22/convolution"
  op: "Conv2D"
  input: "add_6/add"
  input: "conv2d_22/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_22/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_22/convolution"
  input: "conv2d_22/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_22/Relu6"
  op: "Relu6"
  input: "conv2d_22/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_11/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_11/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04161251708865166
      }
    }
  }
}
node {
  name: "depthwise_conv2d_11/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04161251708865166
      }
    }
  }
}
node {
  name: "depthwise_conv2d_11/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_11/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7580337
    }
  }
}
node {
  name: "depthwise_conv2d_11/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_11/random_uniform/max"
  input: "depthwise_conv2d_11/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_11/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_11/random_uniform/RandomUniform"
  input: "depthwise_conv2d_11/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_11/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_11/random_uniform/mul"
  input: "depthwise_conv2d_11/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_11/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_11/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_11/depthwise_kernel"
  input: "depthwise_conv2d_11/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_11/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_11/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_11/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_11/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_11/bias"
  input: "depthwise_conv2d_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_11/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_11/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_11/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_11/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_11/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_11/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_11/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_22/Relu6"
  input: "depthwise_conv2d_11/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_11/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_11/depthwise"
  input: "depthwise_conv2d_11/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_23/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_11/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_23/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\001\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_23/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11180339753627777
      }
    }
  }
}
node {
  name: "conv2d_23/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11180339753627777
      }
    }
  }
}
node {
  name: "conv2d_23/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_23/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9025602
    }
  }
}
node {
  name: "conv2d_23/random_uniform/sub"
  op: "Sub"
  input: "conv2d_23/random_uniform/max"
  input: "conv2d_23/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_23/random_uniform/mul"
  op: "Mul"
  input: "conv2d_23/random_uniform/RandomUniform"
  input: "conv2d_23/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_23/random_uniform"
  op: "Add"
  input: "conv2d_23/random_uniform/mul"
  input: "conv2d_23/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_23/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_23/kernel/Assign"
  op: "Assign"
  input: "conv2d_23/kernel"
  input: "conv2d_23/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_23/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_23/kernel/read"
  op: "Identity"
  input: "conv2d_23/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_23/kernel"
      }
    }
  }
}
node {
  name: "conv2d_23/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_23/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_23/bias/Assign"
  op: "Assign"
  input: "conv2d_23/bias"
  input: "conv2d_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_23/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_23/bias/read"
  op: "Identity"
  input: "conv2d_23/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_23/bias"
      }
    }
  }
}
node {
  name: "conv2d_23/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_23/convolution"
  op: "Conv2D"
  input: "re_lu_23/Relu6"
  input: "conv2d_23/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_23/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_23/convolution"
  input: "conv2d_23/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_24/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000@\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_24/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_24/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_24/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_24/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4097786
    }
  }
}
node {
  name: "conv2d_24/random_uniform/sub"
  op: "Sub"
  input: "conv2d_24/random_uniform/max"
  input: "conv2d_24/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_24/random_uniform/mul"
  op: "Mul"
  input: "conv2d_24/random_uniform/RandomUniform"
  input: "conv2d_24/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_24/random_uniform"
  op: "Add"
  input: "conv2d_24/random_uniform/mul"
  input: "conv2d_24/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_24/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_24/kernel/Assign"
  op: "Assign"
  input: "conv2d_24/kernel"
  input: "conv2d_24/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_24/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_24/kernel/read"
  op: "Identity"
  input: "conv2d_24/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_24/kernel"
      }
    }
  }
}
node {
  name: "conv2d_24/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_24/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_24/bias/Assign"
  op: "Assign"
  input: "conv2d_24/bias"
  input: "conv2d_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_24/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_24/bias/read"
  op: "Identity"
  input: "conv2d_24/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_24/bias"
      }
    }
  }
}
node {
  name: "conv2d_24/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_24/convolution"
  op: "Conv2D"
  input: "conv2d_23/BiasAdd"
  input: "conv2d_24/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_24/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_24/convolution"
  input: "conv2d_24/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_24/Relu6"
  op: "Relu6"
  input: "conv2d_24/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_12/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_12/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03399119898676872
      }
    }
  }
}
node {
  name: "depthwise_conv2d_12/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03399119898676872
      }
    }
  }
}
node {
  name: "depthwise_conv2d_12/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_12/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 24575
    }
  }
}
node {
  name: "depthwise_conv2d_12/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_12/random_uniform/max"
  input: "depthwise_conv2d_12/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_12/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_12/random_uniform/RandomUniform"
  input: "depthwise_conv2d_12/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_12/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_12/random_uniform/mul"
  input: "depthwise_conv2d_12/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_12/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 576
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_12/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_12/depthwise_kernel"
  input: "depthwise_conv2d_12/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_12/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_12/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_12/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_12/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_12/bias"
  input: "depthwise_conv2d_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_12/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_12/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_12/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_12/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_12/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_12/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_12/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_24/Relu6"
  input: "depthwise_conv2d_12/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_12/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_12/depthwise"
  input: "depthwise_conv2d_12/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_25/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_12/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_25/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\002\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_25/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_25/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_25/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_25/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9153834
    }
  }
}
node {
  name: "conv2d_25/random_uniform/sub"
  op: "Sub"
  input: "conv2d_25/random_uniform/max"
  input: "conv2d_25/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_25/random_uniform/mul"
  op: "Mul"
  input: "conv2d_25/random_uniform/RandomUniform"
  input: "conv2d_25/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_25/random_uniform"
  op: "Add"
  input: "conv2d_25/random_uniform/mul"
  input: "conv2d_25/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_25/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_25/kernel/Assign"
  op: "Assign"
  input: "conv2d_25/kernel"
  input: "conv2d_25/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_25/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_25/kernel/read"
  op: "Identity"
  input: "conv2d_25/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_25/kernel"
      }
    }
  }
}
node {
  name: "conv2d_25/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_25/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_25/bias/Assign"
  op: "Assign"
  input: "conv2d_25/bias"
  input: "conv2d_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_25/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_25/bias/read"
  op: "Identity"
  input: "conv2d_25/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_25/bias"
      }
    }
  }
}
node {
  name: "conv2d_25/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_25/convolution"
  op: "Conv2D"
  input: "re_lu_25/Relu6"
  input: "conv2d_25/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_25/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_25/convolution"
  input: "conv2d_25/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_7/add"
  op: "Add"
  input: "conv2d_25/BiasAdd"
  input: "conv2d_23/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_26/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000@\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_26/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_26/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_26/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_26/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2631841
    }
  }
}
node {
  name: "conv2d_26/random_uniform/sub"
  op: "Sub"
  input: "conv2d_26/random_uniform/max"
  input: "conv2d_26/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_26/random_uniform/mul"
  op: "Mul"
  input: "conv2d_26/random_uniform/RandomUniform"
  input: "conv2d_26/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_26/random_uniform"
  op: "Add"
  input: "conv2d_26/random_uniform/mul"
  input: "conv2d_26/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_26/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_26/kernel/Assign"
  op: "Assign"
  input: "conv2d_26/kernel"
  input: "conv2d_26/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_26/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_26/kernel/read"
  op: "Identity"
  input: "conv2d_26/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_26/kernel"
      }
    }
  }
}
node {
  name: "conv2d_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_26/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_26/bias/Assign"
  op: "Assign"
  input: "conv2d_26/bias"
  input: "conv2d_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_26/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_26/bias/read"
  op: "Identity"
  input: "conv2d_26/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_26/bias"
      }
    }
  }
}
node {
  name: "conv2d_26/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_26/convolution"
  op: "Conv2D"
  input: "add_7/add"
  input: "conv2d_26/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_26/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_26/convolution"
  input: "conv2d_26/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_26/Relu6"
  op: "Relu6"
  input: "conv2d_26/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_13/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_13/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03399119898676872
      }
    }
  }
}
node {
  name: "depthwise_conv2d_13/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03399119898676872
      }
    }
  }
}
node {
  name: "depthwise_conv2d_13/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_13/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8186786
    }
  }
}
node {
  name: "depthwise_conv2d_13/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_13/random_uniform/max"
  input: "depthwise_conv2d_13/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_13/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_13/random_uniform/RandomUniform"
  input: "depthwise_conv2d_13/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_13/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_13/random_uniform/mul"
  input: "depthwise_conv2d_13/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_13/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 576
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_13/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_13/depthwise_kernel"
  input: "depthwise_conv2d_13/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_13/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_13/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_13/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_13/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_13/bias"
  input: "depthwise_conv2d_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_13/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_13/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_13/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_13/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_13/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_13/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_13/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_26/Relu6"
  input: "depthwise_conv2d_13/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_13/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_13/depthwise"
  input: "depthwise_conv2d_13/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_27/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_13/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_27/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\002\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_27/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_27/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_27/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_27/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8110591
    }
  }
}
node {
  name: "conv2d_27/random_uniform/sub"
  op: "Sub"
  input: "conv2d_27/random_uniform/max"
  input: "conv2d_27/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_27/random_uniform/mul"
  op: "Mul"
  input: "conv2d_27/random_uniform/RandomUniform"
  input: "conv2d_27/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_27/random_uniform"
  op: "Add"
  input: "conv2d_27/random_uniform/mul"
  input: "conv2d_27/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_27/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_27/kernel/Assign"
  op: "Assign"
  input: "conv2d_27/kernel"
  input: "conv2d_27/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_27/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_27/kernel/read"
  op: "Identity"
  input: "conv2d_27/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_27/kernel"
      }
    }
  }
}
node {
  name: "conv2d_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_27/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_27/bias/Assign"
  op: "Assign"
  input: "conv2d_27/bias"
  input: "conv2d_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_27/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_27/bias/read"
  op: "Identity"
  input: "conv2d_27/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_27/bias"
      }
    }
  }
}
node {
  name: "conv2d_27/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_27/convolution"
  op: "Conv2D"
  input: "re_lu_27/Relu6"
  input: "conv2d_27/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_27/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_27/convolution"
  input: "conv2d_27/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_8/add"
  op: "Add"
  input: "conv2d_27/BiasAdd"
  input: "add_7/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_28/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000@\002\000\000"
      }
    }
  }
}
node {
  name: "conv2d_28/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_28/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09449111670255661
      }
    }
  }
}
node {
  name: "conv2d_28/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_28/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6663823
    }
  }
}
node {
  name: "conv2d_28/random_uniform/sub"
  op: "Sub"
  input: "conv2d_28/random_uniform/max"
  input: "conv2d_28/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_28/random_uniform/mul"
  op: "Mul"
  input: "conv2d_28/random_uniform/RandomUniform"
  input: "conv2d_28/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_28/random_uniform"
  op: "Add"
  input: "conv2d_28/random_uniform/mul"
  input: "conv2d_28/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_28/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_28/kernel/Assign"
  op: "Assign"
  input: "conv2d_28/kernel"
  input: "conv2d_28/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_28/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_28/kernel/read"
  op: "Identity"
  input: "conv2d_28/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_28/kernel"
      }
    }
  }
}
node {
  name: "conv2d_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_28/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_28/bias/Assign"
  op: "Assign"
  input: "conv2d_28/bias"
  input: "conv2d_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_28/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_28/bias/read"
  op: "Identity"
  input: "conv2d_28/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_28/bias"
      }
    }
  }
}
node {
  name: "conv2d_28/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_28/convolution"
  op: "Conv2D"
  input: "add_8/add"
  input: "conv2d_28/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_28/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_28/convolution"
  input: "conv2d_28/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_28/Relu6"
  op: "Relu6"
  input: "conv2d_28/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_14/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_14/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03399119898676872
      }
    }
  }
}
node {
  name: "depthwise_conv2d_14/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03399119898676872
      }
    }
  }
}
node {
  name: "depthwise_conv2d_14/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_14/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3135200
    }
  }
}
node {
  name: "depthwise_conv2d_14/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_14/random_uniform/max"
  input: "depthwise_conv2d_14/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_14/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_14/random_uniform/RandomUniform"
  input: "depthwise_conv2d_14/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_14/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_14/random_uniform/mul"
  input: "depthwise_conv2d_14/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_14/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 576
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_14/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_14/depthwise_kernel"
  input: "depthwise_conv2d_14/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_14/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_14/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_14/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_14/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_14/bias"
  input: "depthwise_conv2d_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_14/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_14/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_14/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_14/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_14/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_14/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_14/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_28/Relu6"
  input: "depthwise_conv2d_14/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_14/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_14/depthwise"
  input: "depthwise_conv2d_14/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_29/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_14/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_29/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\002\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_29/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0902893915772438
      }
    }
  }
}
node {
  name: "conv2d_29/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0902893915772438
      }
    }
  }
}
node {
  name: "conv2d_29/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_29/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6050092
    }
  }
}
node {
  name: "conv2d_29/random_uniform/sub"
  op: "Sub"
  input: "conv2d_29/random_uniform/max"
  input: "conv2d_29/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_29/random_uniform/mul"
  op: "Mul"
  input: "conv2d_29/random_uniform/RandomUniform"
  input: "conv2d_29/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_29/random_uniform"
  op: "Add"
  input: "conv2d_29/random_uniform/mul"
  input: "conv2d_29/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_29/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_29/kernel/Assign"
  op: "Assign"
  input: "conv2d_29/kernel"
  input: "conv2d_29/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_29/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_29/kernel/read"
  op: "Identity"
  input: "conv2d_29/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_29/kernel"
      }
    }
  }
}
node {
  name: "conv2d_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_29/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_29/bias/Assign"
  op: "Assign"
  input: "conv2d_29/bias"
  input: "conv2d_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_29/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_29/bias/read"
  op: "Identity"
  input: "conv2d_29/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_29/bias"
      }
    }
  }
}
node {
  name: "conv2d_29/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_29/convolution"
  op: "Conv2D"
  input: "re_lu_29/Relu6"
  input: "conv2d_29/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_29/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_29/convolution"
  input: "conv2d_29/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_30/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\240\000\000\000\300\003\000\000"
      }
    }
  }
}
node {
  name: "conv2d_30/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_30/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_30/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_30/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3529168
    }
  }
}
node {
  name: "conv2d_30/random_uniform/sub"
  op: "Sub"
  input: "conv2d_30/random_uniform/max"
  input: "conv2d_30/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_30/random_uniform/mul"
  op: "Mul"
  input: "conv2d_30/random_uniform/RandomUniform"
  input: "conv2d_30/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_30/random_uniform"
  op: "Add"
  input: "conv2d_30/random_uniform/mul"
  input: "conv2d_30/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_30/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 160
        }
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_30/kernel/Assign"
  op: "Assign"
  input: "conv2d_30/kernel"
  input: "conv2d_30/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_30/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_30/kernel/read"
  op: "Identity"
  input: "conv2d_30/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_30/kernel"
      }
    }
  }
}
node {
  name: "conv2d_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_30/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_30/bias/Assign"
  op: "Assign"
  input: "conv2d_30/bias"
  input: "conv2d_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_30/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_30/bias/read"
  op: "Identity"
  input: "conv2d_30/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_30/bias"
      }
    }
  }
}
node {
  name: "conv2d_30/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_30/convolution"
  op: "Conv2D"
  input: "conv2d_29/BiasAdd"
  input: "conv2d_30/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_30/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_30/convolution"
  input: "conv2d_30/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_30/Relu6"
  op: "Relu6"
  input: "conv2d_30/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_15/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_15/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.026338599622249603
      }
    }
  }
}
node {
  name: "depthwise_conv2d_15/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.026338599622249603
      }
    }
  }
}
node {
  name: "depthwise_conv2d_15/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_15/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7497925
    }
  }
}
node {
  name: "depthwise_conv2d_15/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_15/random_uniform/max"
  input: "depthwise_conv2d_15/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_15/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_15/random_uniform/RandomUniform"
  input: "depthwise_conv2d_15/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_15/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_15/random_uniform/mul"
  input: "depthwise_conv2d_15/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_15/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 960
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_15/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_15/depthwise_kernel"
  input: "depthwise_conv2d_15/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_15/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_15/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_15/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_15/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_15/bias"
  input: "depthwise_conv2d_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_15/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_15/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_15/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_15/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_15/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_15/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_15/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_30/Relu6"
  input: "depthwise_conv2d_15/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_15/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_15/depthwise"
  input: "depthwise_conv2d_15/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_31/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_15/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_31/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\003\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_31/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_31/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_31/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_31/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8411480
    }
  }
}
node {
  name: "conv2d_31/random_uniform/sub"
  op: "Sub"
  input: "conv2d_31/random_uniform/max"
  input: "conv2d_31/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_31/random_uniform/mul"
  op: "Mul"
  input: "conv2d_31/random_uniform/RandomUniform"
  input: "conv2d_31/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_31/random_uniform"
  op: "Add"
  input: "conv2d_31/random_uniform/mul"
  input: "conv2d_31/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_31/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 960
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_31/kernel/Assign"
  op: "Assign"
  input: "conv2d_31/kernel"
  input: "conv2d_31/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_31/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_31/kernel/read"
  op: "Identity"
  input: "conv2d_31/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_31/kernel"
      }
    }
  }
}
node {
  name: "conv2d_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_31/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_31/bias/Assign"
  op: "Assign"
  input: "conv2d_31/bias"
  input: "conv2d_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_31/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_31/bias/read"
  op: "Identity"
  input: "conv2d_31/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_31/bias"
      }
    }
  }
}
node {
  name: "conv2d_31/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_31/convolution"
  op: "Conv2D"
  input: "re_lu_31/Relu6"
  input: "conv2d_31/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_31/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_31/convolution"
  input: "conv2d_31/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_9/add"
  op: "Add"
  input: "conv2d_31/BiasAdd"
  input: "conv2d_29/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_32/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\240\000\000\000\300\003\000\000"
      }
    }
  }
}
node {
  name: "conv2d_32/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_32/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_32/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_32/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7371344
    }
  }
}
node {
  name: "conv2d_32/random_uniform/sub"
  op: "Sub"
  input: "conv2d_32/random_uniform/max"
  input: "conv2d_32/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_32/random_uniform/mul"
  op: "Mul"
  input: "conv2d_32/random_uniform/RandomUniform"
  input: "conv2d_32/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_32/random_uniform"
  op: "Add"
  input: "conv2d_32/random_uniform/mul"
  input: "conv2d_32/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_32/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 160
        }
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_32/kernel/Assign"
  op: "Assign"
  input: "conv2d_32/kernel"
  input: "conv2d_32/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_32/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_32/kernel/read"
  op: "Identity"
  input: "conv2d_32/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_32/kernel"
      }
    }
  }
}
node {
  name: "conv2d_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_32/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_32/bias/Assign"
  op: "Assign"
  input: "conv2d_32/bias"
  input: "conv2d_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_32/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_32/bias/read"
  op: "Identity"
  input: "conv2d_32/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_32/bias"
      }
    }
  }
}
node {
  name: "conv2d_32/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_32/convolution"
  op: "Conv2D"
  input: "add_9/add"
  input: "conv2d_32/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_32/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_32/convolution"
  input: "conv2d_32/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_32/Relu6"
  op: "Relu6"
  input: "conv2d_32/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_16/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_16/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.026338599622249603
      }
    }
  }
}
node {
  name: "depthwise_conv2d_16/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.026338599622249603
      }
    }
  }
}
node {
  name: "depthwise_conv2d_16/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_16/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 513414
    }
  }
}
node {
  name: "depthwise_conv2d_16/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_16/random_uniform/max"
  input: "depthwise_conv2d_16/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_16/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_16/random_uniform/RandomUniform"
  input: "depthwise_conv2d_16/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_16/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_16/random_uniform/mul"
  input: "depthwise_conv2d_16/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_16/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 960
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_16/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_16/depthwise_kernel"
  input: "depthwise_conv2d_16/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_16/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_16/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_16/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_16/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_16/bias"
  input: "depthwise_conv2d_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_16/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_16/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_16/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_16/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_16/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_16/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_16/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_32/Relu6"
  input: "depthwise_conv2d_16/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_16/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_16/depthwise"
  input: "depthwise_conv2d_16/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_33/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_16/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_33/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\003\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_33/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_33/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_33/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_33/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2726280
    }
  }
}
node {
  name: "conv2d_33/random_uniform/sub"
  op: "Sub"
  input: "conv2d_33/random_uniform/max"
  input: "conv2d_33/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_33/random_uniform/mul"
  op: "Mul"
  input: "conv2d_33/random_uniform/RandomUniform"
  input: "conv2d_33/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_33/random_uniform"
  op: "Add"
  input: "conv2d_33/random_uniform/mul"
  input: "conv2d_33/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_33/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 960
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_33/kernel/Assign"
  op: "Assign"
  input: "conv2d_33/kernel"
  input: "conv2d_33/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_33/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_33/kernel/read"
  op: "Identity"
  input: "conv2d_33/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_33/kernel"
      }
    }
  }
}
node {
  name: "conv2d_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_33/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_33/bias/Assign"
  op: "Assign"
  input: "conv2d_33/bias"
  input: "conv2d_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_33/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_33/bias/read"
  op: "Identity"
  input: "conv2d_33/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_33/bias"
      }
    }
  }
}
node {
  name: "conv2d_33/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_33/convolution"
  op: "Conv2D"
  input: "re_lu_33/Relu6"
  input: "conv2d_33/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_33/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_33/convolution"
  input: "conv2d_33/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "add_10/add"
  op: "Add"
  input: "conv2d_33/BiasAdd"
  input: "add_9/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_34/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\240\000\000\000\300\003\000\000"
      }
    }
  }
}
node {
  name: "conv2d_34/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_34/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07319250702857971
      }
    }
  }
}
node {
  name: "conv2d_34/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_34/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5979992
    }
  }
}
node {
  name: "conv2d_34/random_uniform/sub"
  op: "Sub"
  input: "conv2d_34/random_uniform/max"
  input: "conv2d_34/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_34/random_uniform/mul"
  op: "Mul"
  input: "conv2d_34/random_uniform/RandomUniform"
  input: "conv2d_34/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_34/random_uniform"
  op: "Add"
  input: "conv2d_34/random_uniform/mul"
  input: "conv2d_34/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_34/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 160
        }
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_34/kernel/Assign"
  op: "Assign"
  input: "conv2d_34/kernel"
  input: "conv2d_34/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_34/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_34/kernel/read"
  op: "Identity"
  input: "conv2d_34/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_34/kernel"
      }
    }
  }
}
node {
  name: "conv2d_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_34/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_34/bias/Assign"
  op: "Assign"
  input: "conv2d_34/bias"
  input: "conv2d_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_34/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_34/bias/read"
  op: "Identity"
  input: "conv2d_34/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_34/bias"
      }
    }
  }
}
node {
  name: "conv2d_34/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_34/convolution"
  op: "Conv2D"
  input: "add_10/add"
  input: "conv2d_34/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_34/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_34/convolution"
  input: "conv2d_34/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_34/Relu6"
  op: "Relu6"
  input: "conv2d_34/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_17/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_17/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.026338599622249603
      }
    }
  }
}
node {
  name: "depthwise_conv2d_17/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.026338599622249603
      }
    }
  }
}
node {
  name: "depthwise_conv2d_17/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "depthwise_conv2d_17/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4191692
    }
  }
}
node {
  name: "depthwise_conv2d_17/random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_17/random_uniform/max"
  input: "depthwise_conv2d_17/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_17/random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_17/random_uniform/RandomUniform"
  input: "depthwise_conv2d_17/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_17/random_uniform"
  op: "Add"
  input: "depthwise_conv2d_17/random_uniform/mul"
  input: "depthwise_conv2d_17/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_17/depthwise_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 960
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_17/depthwise_kernel/Assign"
  op: "Assign"
  input: "depthwise_conv2d_17/depthwise_kernel"
  input: "depthwise_conv2d_17/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_17/depthwise_kernel/read"
  op: "Identity"
  input: "depthwise_conv2d_17/depthwise_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_17/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "depthwise_conv2d_17/bias/Assign"
  op: "Assign"
  input: "depthwise_conv2d_17/bias"
  input: "depthwise_conv2d_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_17/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "depthwise_conv2d_17/bias/read"
  op: "Identity"
  input: "depthwise_conv2d_17/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_17/bias"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_17/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_17/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_17/depthwise"
  op: "DepthwiseConv2dNative"
  input: "re_lu_34/Relu6"
  input: "depthwise_conv2d_17/depthwise_kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_17/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_17/depthwise"
  input: "depthwise_conv2d_17/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "re_lu_35/Relu6"
  op: "Relu6"
  input: "depthwise_conv2d_17/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_35/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\003\000\000@\001\000\000"
      }
    }
  }
}
node {
  name: "conv2d_35/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06846532225608826
      }
    }
  }
}
node {
  name: "conv2d_35/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06846532225608826
      }
    }
  }
}
node {
  name: "conv2d_35/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_35/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5365234
    }
  }
}
node {
  name: "conv2d_35/random_uniform/sub"
  op: "Sub"
  input: "conv2d_35/random_uniform/max"
  input: "conv2d_35/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_35/random_uniform/mul"
  op: "Mul"
  input: "conv2d_35/random_uniform/RandomUniform"
  input: "conv2d_35/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_35/random_uniform"
  op: "Add"
  input: "conv2d_35/random_uniform/mul"
  input: "conv2d_35/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_35/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 960
        }
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_35/kernel/Assign"
  op: "Assign"
  input: "conv2d_35/kernel"
  input: "conv2d_35/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_35/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_35/kernel/read"
  op: "Identity"
  input: "conv2d_35/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_35/kernel"
      }
    }
  }
}
node {
  name: "conv2d_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_35/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_35/bias/Assign"
  op: "Assign"
  input: "conv2d_35/bias"
  input: "conv2d_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_35/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_35/bias/read"
  op: "Identity"
  input: "conv2d_35/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_35/bias"
      }
    }
  }
}
node {
  name: "conv2d_35/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_35/convolution"
  op: "Conv2D"
  input: "re_lu_35/Relu6"
  input: "conv2d_35/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_35/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_35/convolution"
  input: "conv2d_35/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "classes4/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "classes4/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08703882992267609
      }
    }
  }
}
node {
  name: "classes4/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08703882992267609
      }
    }
  }
}
node {
  name: "classes4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "classes4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2307041
    }
  }
}
node {
  name: "classes4/random_uniform/sub"
  op: "Sub"
  input: "classes4/random_uniform/max"
  input: "classes4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes4/random_uniform/mul"
  op: "Mul"
  input: "classes4/random_uniform/RandomUniform"
  input: "classes4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes4/random_uniform"
  op: "Add"
  input: "classes4/random_uniform/mul"
  input: "classes4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes4/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "classes4/kernel/Assign"
  op: "Assign"
  input: "classes4/kernel"
  input: "classes4/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "classes4/kernel/read"
  op: "Identity"
  input: "classes4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes4/kernel"
      }
    }
  }
}
node {
  name: "classes4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "classes4/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "classes4/bias/Assign"
  op: "Assign"
  input: "classes4/bias"
  input: "classes4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "classes4/bias/read"
  op: "Identity"
  input: "classes4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes4/bias"
      }
    }
  }
}
node {
  name: "classes4/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "classes4/convolution"
  op: "Conv2D"
  input: "add_6/add"
  input: "classes4/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "classes4/BiasAdd"
  op: "BiasAdd"
  input: "classes4/convolution"
  input: "classes4/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "classes5/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "classes5/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07453560084104538
      }
    }
  }
}
node {
  name: "classes5/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07453560084104538
      }
    }
  }
}
node {
  name: "classes5/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "classes5/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3784956
    }
  }
}
node {
  name: "classes5/random_uniform/sub"
  op: "Sub"
  input: "classes5/random_uniform/max"
  input: "classes5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes5/random_uniform/mul"
  op: "Mul"
  input: "classes5/random_uniform/RandomUniform"
  input: "classes5/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes5/random_uniform"
  op: "Add"
  input: "classes5/random_uniform/mul"
  input: "classes5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes5/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "classes5/kernel/Assign"
  op: "Assign"
  input: "classes5/kernel"
  input: "classes5/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "classes5/kernel/read"
  op: "Identity"
  input: "classes5/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes5/kernel"
      }
    }
  }
}
node {
  name: "classes5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "classes5/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "classes5/bias/Assign"
  op: "Assign"
  input: "classes5/bias"
  input: "classes5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "classes5/bias/read"
  op: "Identity"
  input: "classes5/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes5/bias"
      }
    }
  }
}
node {
  name: "classes5/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "classes5/convolution"
  op: "Conv2D"
  input: "add_8/add"
  input: "classes5/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "classes5/BiasAdd"
  op: "BiasAdd"
  input: "classes5/convolution"
  input: "classes5/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "classes6/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\240\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "classes6/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06019292771816254
      }
    }
  }
}
node {
  name: "classes6/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06019292771816254
      }
    }
  }
}
node {
  name: "classes6/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "classes6/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 754618
    }
  }
}
node {
  name: "classes6/random_uniform/sub"
  op: "Sub"
  input: "classes6/random_uniform/max"
  input: "classes6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes6/random_uniform/mul"
  op: "Mul"
  input: "classes6/random_uniform/RandomUniform"
  input: "classes6/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes6/random_uniform"
  op: "Add"
  input: "classes6/random_uniform/mul"
  input: "classes6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes6/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 160
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "classes6/kernel/Assign"
  op: "Assign"
  input: "classes6/kernel"
  input: "classes6/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "classes6/kernel/read"
  op: "Identity"
  input: "classes6/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes6/kernel"
      }
    }
  }
}
node {
  name: "classes6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "classes6/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "classes6/bias/Assign"
  op: "Assign"
  input: "classes6/bias"
  input: "classes6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "classes6/bias/read"
  op: "Identity"
  input: "classes6/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes6/bias"
      }
    }
  }
}
node {
  name: "classes6/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "classes6/convolution"
  op: "Conv2D"
  input: "add_10/add"
  input: "classes6/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "classes6/BiasAdd"
  op: "BiasAdd"
  input: "classes6/convolution"
  input: "classes6/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "classes7/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\001\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "classes7/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04402254521846771
      }
    }
  }
}
node {
  name: "classes7/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04402254521846771
      }
    }
  }
}
node {
  name: "classes7/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "classes7/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7127588
    }
  }
}
node {
  name: "classes7/random_uniform/sub"
  op: "Sub"
  input: "classes7/random_uniform/max"
  input: "classes7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes7/random_uniform/mul"
  op: "Mul"
  input: "classes7/random_uniform/RandomUniform"
  input: "classes7/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes7/random_uniform"
  op: "Add"
  input: "classes7/random_uniform/mul"
  input: "classes7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes7/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 320
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "classes7/kernel/Assign"
  op: "Assign"
  input: "classes7/kernel"
  input: "classes7/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes7/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "classes7/kernel/read"
  op: "Identity"
  input: "classes7/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes7/kernel"
      }
    }
  }
}
node {
  name: "classes7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "classes7/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "classes7/bias/Assign"
  op: "Assign"
  input: "classes7/bias"
  input: "classes7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "classes7/bias/read"
  op: "Identity"
  input: "classes7/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes7/bias"
      }
    }
  }
}
node {
  name: "classes7/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "classes7/convolution"
  op: "Conv2D"
  input: "conv2d_35/BiasAdd"
  input: "classes7/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "classes7/BiasAdd"
  op: "BiasAdd"
  input: "classes7/convolution"
  input: "classes7/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "boxes4/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "boxes4/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09128709137439728
      }
    }
  }
}
node {
  name: "boxes4/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09128709137439728
      }
    }
  }
}
node {
  name: "boxes4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "boxes4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9714796
    }
  }
}
node {
  name: "boxes4/random_uniform/sub"
  op: "Sub"
  input: "boxes4/random_uniform/max"
  input: "boxes4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes4/random_uniform/mul"
  op: "Mul"
  input: "boxes4/random_uniform/RandomUniform"
  input: "boxes4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes4/random_uniform"
  op: "Add"
  input: "boxes4/random_uniform/mul"
  input: "boxes4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes4/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "boxes4/kernel/Assign"
  op: "Assign"
  input: "boxes4/kernel"
  input: "boxes4/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "boxes4/kernel/read"
  op: "Identity"
  input: "boxes4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes4/kernel"
      }
    }
  }
}
node {
  name: "boxes4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boxes4/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "boxes4/bias/Assign"
  op: "Assign"
  input: "boxes4/bias"
  input: "boxes4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "boxes4/bias/read"
  op: "Identity"
  input: "boxes4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes4/bias"
      }
    }
  }
}
node {
  name: "boxes4/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "boxes4/convolution"
  op: "Conv2D"
  input: "add_6/add"
  input: "boxes4/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "boxes4/BiasAdd"
  op: "BiasAdd"
  input: "boxes4/convolution"
  input: "boxes4/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "boxes5/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "boxes5/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07715167850255966
      }
    }
  }
}
node {
  name: "boxes5/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07715167850255966
      }
    }
  }
}
node {
  name: "boxes5/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "boxes5/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5593306
    }
  }
}
node {
  name: "boxes5/random_uniform/sub"
  op: "Sub"
  input: "boxes5/random_uniform/max"
  input: "boxes5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes5/random_uniform/mul"
  op: "Mul"
  input: "boxes5/random_uniform/RandomUniform"
  input: "boxes5/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes5/random_uniform"
  op: "Add"
  input: "boxes5/random_uniform/mul"
  input: "boxes5/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes5/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "boxes5/kernel/Assign"
  op: "Assign"
  input: "boxes5/kernel"
  input: "boxes5/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "boxes5/kernel/read"
  op: "Identity"
  input: "boxes5/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes5/kernel"
      }
    }
  }
}
node {
  name: "boxes5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boxes5/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "boxes5/bias/Assign"
  op: "Assign"
  input: "boxes5/bias"
  input: "boxes5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "boxes5/bias/read"
  op: "Identity"
  input: "boxes5/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes5/bias"
      }
    }
  }
}
node {
  name: "boxes5/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "boxes5/convolution"
  op: "Conv2D"
  input: "add_8/add"
  input: "boxes5/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "boxes5/BiasAdd"
  op: "BiasAdd"
  input: "boxes5/convolution"
  input: "boxes5/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "boxes6/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\240\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "boxes6/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06154574453830719
      }
    }
  }
}
node {
  name: "boxes6/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06154574453830719
      }
    }
  }
}
node {
  name: "boxes6/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "boxes6/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2653322
    }
  }
}
node {
  name: "boxes6/random_uniform/sub"
  op: "Sub"
  input: "boxes6/random_uniform/max"
  input: "boxes6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes6/random_uniform/mul"
  op: "Mul"
  input: "boxes6/random_uniform/RandomUniform"
  input: "boxes6/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes6/random_uniform"
  op: "Add"
  input: "boxes6/random_uniform/mul"
  input: "boxes6/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes6/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 160
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "boxes6/kernel/Assign"
  op: "Assign"
  input: "boxes6/kernel"
  input: "boxes6/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "boxes6/kernel/read"
  op: "Identity"
  input: "boxes6/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes6/kernel"
      }
    }
  }
}
node {
  name: "boxes6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boxes6/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "boxes6/bias/Assign"
  op: "Assign"
  input: "boxes6/bias"
  input: "boxes6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "boxes6/bias/read"
  op: "Identity"
  input: "boxes6/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes6/bias"
      }
    }
  }
}
node {
  name: "boxes6/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "boxes6/convolution"
  op: "Conv2D"
  input: "add_10/add"
  input: "boxes6/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "boxes6/BiasAdd"
  op: "BiasAdd"
  input: "boxes6/convolution"
  input: "boxes6/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "boxes7/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\001\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "boxes7/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.044543541967868805
      }
    }
  }
}
node {
  name: "boxes7/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.044543541967868805
      }
    }
  }
}
node {
  name: "boxes7/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "boxes7/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 207331
    }
  }
}
node {
  name: "boxes7/random_uniform/sub"
  op: "Sub"
  input: "boxes7/random_uniform/max"
  input: "boxes7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes7/random_uniform/mul"
  op: "Mul"
  input: "boxes7/random_uniform/RandomUniform"
  input: "boxes7/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes7/random_uniform"
  op: "Add"
  input: "boxes7/random_uniform/mul"
  input: "boxes7/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes7/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 320
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "boxes7/kernel/Assign"
  op: "Assign"
  input: "boxes7/kernel"
  input: "boxes7/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes7/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "boxes7/kernel/read"
  op: "Identity"
  input: "boxes7/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes7/kernel"
      }
    }
  }
}
node {
  name: "boxes7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boxes7/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "boxes7/bias/Assign"
  op: "Assign"
  input: "boxes7/bias"
  input: "boxes7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "boxes7/bias/read"
  op: "Identity"
  input: "boxes7/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes7/bias"
      }
    }
  }
}
node {
  name: "boxes7/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "boxes7/convolution"
  op: "Conv2D"
  input: "conv2d_35/BiasAdd"
  input: "boxes7/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "boxes7/BiasAdd"
  op: "BiasAdd"
  input: "boxes7/convolution"
  input: "boxes7/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "classes4_reshape/Shape"
  op: "Shape"
  input: "classes4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "classes4_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "classes4_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "classes4_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "classes4_reshape/strided_slice"
  op: "StridedSlice"
  input: "classes4_reshape/Shape"
  input: "classes4_reshape/strided_slice/stack"
  input: "classes4_reshape/strided_slice/stack_1"
  input: "classes4_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "classes4_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "classes4_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "classes4_reshape/Reshape/shape"
  op: "Pack"
  input: "classes4_reshape/strided_slice"
  input: "classes4_reshape/Reshape/shape/1"
  input: "classes4_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "classes4_reshape/Reshape"
  op: "Reshape"
  input: "classes4/BiasAdd"
  input: "classes4_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "classes5_reshape/Shape"
  op: "Shape"
  input: "classes5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "classes5_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "classes5_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "classes5_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "classes5_reshape/strided_slice"
  op: "StridedSlice"
  input: "classes5_reshape/Shape"
  input: "classes5_reshape/strided_slice/stack"
  input: "classes5_reshape/strided_slice/stack_1"
  input: "classes5_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "classes5_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "classes5_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "classes5_reshape/Reshape/shape"
  op: "Pack"
  input: "classes5_reshape/strided_slice"
  input: "classes5_reshape/Reshape/shape/1"
  input: "classes5_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "classes5_reshape/Reshape"
  op: "Reshape"
  input: "classes5/BiasAdd"
  input: "classes5_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "classes6_reshape/Shape"
  op: "Shape"
  input: "classes6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "classes6_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "classes6_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "classes6_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "classes6_reshape/strided_slice"
  op: "StridedSlice"
  input: "classes6_reshape/Shape"
  input: "classes6_reshape/strided_slice/stack"
  input: "classes6_reshape/strided_slice/stack_1"
  input: "classes6_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "classes6_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "classes6_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "classes6_reshape/Reshape/shape"
  op: "Pack"
  input: "classes6_reshape/strided_slice"
  input: "classes6_reshape/Reshape/shape/1"
  input: "classes6_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "classes6_reshape/Reshape"
  op: "Reshape"
  input: "classes6/BiasAdd"
  input: "classes6_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "classes7_reshape/Shape"
  op: "Shape"
  input: "classes7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "classes7_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "classes7_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "classes7_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "classes7_reshape/strided_slice"
  op: "StridedSlice"
  input: "classes7_reshape/Shape"
  input: "classes7_reshape/strided_slice/stack"
  input: "classes7_reshape/strided_slice/stack_1"
  input: "classes7_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "classes7_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "classes7_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "classes7_reshape/Reshape/shape"
  op: "Pack"
  input: "classes7_reshape/strided_slice"
  input: "classes7_reshape/Reshape/shape/1"
  input: "classes7_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "classes7_reshape/Reshape"
  op: "Reshape"
  input: "classes7/BiasAdd"
  input: "classes7_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 30
          }
          dim {
            size: 4
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\211\210\210<6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?6\224\327<\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?6\224\327<\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?6\224\327<\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?6\224\327<\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?(\257\241=\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?(\257\241=\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?(\257\241=\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?(\257\241=\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\242\274\006>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\242\274\006>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\242\274\006>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\242\274\006>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\257\241<>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\257\241<>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\257\241<>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\257\241<>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\275\206r>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\275\206r>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\275\206r>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\275\206r>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\3455\224>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\3455\224>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\3455\224>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\3455\224>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?l(\257>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?l(\257>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?l(\257>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?l(\257>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\363\032\312>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\363\032\312>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\363\032\312>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\363\032\312>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?y\r\345>\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?y\r\345>\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?y\r\345>\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?y\r\345>\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\000\000\000?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\000\000\000?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\000\000\000?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\000\000\000?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Cy\r?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Cy\r?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Cy\r?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Cy\r?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\207\362\032?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\207\362\032?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\207\362\032?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\207\362\032?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\312k(?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\312k(?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\312k(?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\312k(?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\r\3455?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\r\3455?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\r\3455?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\r\3455?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Q^C?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Q^C?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Q^C?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Q^C?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\224\327P?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\224\327P?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\224\327P?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\224\327P?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\330P^?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\330P^?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\330P^?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\330P^?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\033\312k?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\033\312k?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\033\312k?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\033\312k?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?^Cy?\303\320\020=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?^Cy?\315\314L=\n\327\243=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?^Cy?\303\320\220=j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?^Cy?\303\320\220=j\264g=\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "anchors4/Shape"
  op: "Shape"
  input: "boxes4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "anchors4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors4/strided_slice"
  op: "StridedSlice"
  input: "anchors4/Shape"
  input: "anchors4/strided_slice/stack"
  input: "anchors4/strided_slice/stack_1"
  input: "anchors4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "anchors4/Tile/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors4/Tile/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors4/Tile/multiples/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors4/Tile/multiples/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors4/Tile/multiples"
  op: "Pack"
  input: "anchors4/strided_slice"
  input: "anchors4/Tile/multiples/1"
  input: "anchors4/Tile/multiples/2"
  input: "anchors4/Tile/multiples/3"
  input: "anchors4/Tile/multiples/4"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "anchors4/Tile"
  op: "Tile"
  input: "anchors4/Const"
  input: "anchors4/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 19
          }
          dim {
            size: 30
          }
          dim {
            size: 4
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\211\210\210<6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?6\224\327<\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?6\224\327<\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?6\224\327<\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?6\224\327<\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?(\257\241=\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?(\257\241=\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?(\257\241=\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?(\257\241=\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\242\274\006>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\242\274\006>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\242\274\006>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\242\274\006>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\257\241<>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\257\241<>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\257\241<>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\257\241<>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\275\206r>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\275\206r>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\275\206r>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\275\206r>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\3455\224>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\3455\224>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\3455\224>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\3455\224>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?l(\257>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?l(\257>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?l(\257>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?l(\257>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\363\032\312>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\363\032\312>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\363\032\312>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\363\032\312>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?y\r\345>\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?y\r\345>\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?y\r\345>\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?y\r\345>\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\000\000\000?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\000\000\000?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\000\000\000?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\000\000\000?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Cy\r?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Cy\r?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Cy\r?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Cy\r?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\207\362\032?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\207\362\032?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\207\362\032?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\207\362\032?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\312k(?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\312k(?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\312k(?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\312k(?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\r\3455?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\r\3455?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\r\3455?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\r\3455?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Q^C?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Q^C?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Q^C?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?Q^C?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\224\327P?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\224\327P?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\224\327P?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\224\327P?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\330P^?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\330P^?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\330P^?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\330P^?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\033\312k?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\033\312k?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\033\312k?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?\033\312k?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\210<^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314L=^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252\252=^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356\356=^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\031>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273;>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335]>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\200>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\221>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\242>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33\263>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\304>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\325>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff\346>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww\367>^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DD\004?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\014?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UU\025?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\035?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ff&?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356.?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?ww7?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000@?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210H?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021Q?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231Y?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"b?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252j?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?33s?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?^Cy?\303\320\220=j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?^Cy?\315\314\314=\n\327#>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?^Cy?\303\320\020>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273{?^Cy?\303\320\020>j\264\347=\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "anchors5/Shape"
  op: "Shape"
  input: "boxes5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors5/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "anchors5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors5/strided_slice"
  op: "StridedSlice"
  input: "anchors5/Shape"
  input: "anchors5/strided_slice/stack"
  input: "anchors5/strided_slice/stack_1"
  input: "anchors5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "anchors5/Tile/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors5/Tile/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors5/Tile/multiples/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors5/Tile/multiples/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors5/Tile/multiples"
  op: "Pack"
  input: "anchors5/strided_slice"
  input: "anchors5/Tile/multiples/1"
  input: "anchors5/Tile/multiples/2"
  input: "anchors5/Tile/multiples/3"
  input: "anchors5/Tile/multiples/4"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "anchors5/Tile"
  op: "Tile"
  input: "anchors5/Const"
  input: "anchors5/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
          dim {
            size: 15
          }
          dim {
            size: 4
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\211\210\010=\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314L=\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314L=\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314L=\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314L=\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231\031>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231\031>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231\031>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231\031>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000\200>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000\200>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000\200>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000\200>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33\263>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33\263>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33\263>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33\263>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff\346>\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff\346>\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff\346>\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff\346>\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314\014?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314\014?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314\014?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314\014?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff&?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff&?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff&?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff&?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000@?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000@?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000@?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000@?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231Y?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231Y?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231Y?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231Y?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33s?\303\320\020>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33s?\315\314L>\n\327\243>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33s?\303\320\220>j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33s?\303\320\220>j\264g>\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "anchors6/Shape"
  op: "Shape"
  input: "boxes6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors6/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "anchors6/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors6/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors6/strided_slice"
  op: "StridedSlice"
  input: "anchors6/Shape"
  input: "anchors6/strided_slice/stack"
  input: "anchors6/strided_slice/stack_1"
  input: "anchors6/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "anchors6/Tile/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors6/Tile/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors6/Tile/multiples/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors6/Tile/multiples/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors6/Tile/multiples"
  op: "Pack"
  input: "anchors6/strided_slice"
  input: "anchors6/Tile/multiples/1"
  input: "anchors6/Tile/multiples/2"
  input: "anchors6/Tile/multiples/3"
  input: "anchors6/Tile/multiples/4"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "anchors6/Tile"
  op: "Tile"
  input: "anchors6/Const"
  input: "anchors6/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
          dim {
            size: 15
          }
          dim {
            size: 4
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\211\210\010=\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314L=\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314L=\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314L=\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314L=\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231\031>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231\031>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231\031>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231\031>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000\200>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000\200>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000\200>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000\200>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33\263>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33\263>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33\263>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33\263>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff\346>\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff\346>\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff\346>\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff\346>\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314\014?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314\014?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314\014?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\315\314\014?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff&?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff&?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff&?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?ff&?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000@?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000@?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000@?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\000\000@?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231Y?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231Y?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231Y?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?\232\231Y?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\211\210\010=33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\315\314\314=33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\253\252*>33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\357\356n>33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\232\231\231>33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\274\273\273>33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\336\335\335>33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\000\000\000?33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\021\021\021?33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?\"\"\"?33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?333?33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?DDD?33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?UUU?33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?fff?33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33s?\303\320\220>j\264g?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33s?\315\314\314>\n\327#?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33s?\347\323\372>\206\251H?\000\000\200?\000\000\200?\000\000\200?\000\000\200?www?33s?\303\320\020?j\264\347>\000\000\200?\000\000\200?\000\000\200?\000\000\200?"
      }
    }
  }
}
node {
  name: "anchors7/Shape"
  op: "Shape"
  input: "boxes7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors7/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "anchors7/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors7/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors7/strided_slice"
  op: "StridedSlice"
  input: "anchors7/Shape"
  input: "anchors7/strided_slice/stack"
  input: "anchors7/strided_slice/stack_1"
  input: "anchors7/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "anchors7/Tile/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors7/Tile/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors7/Tile/multiples/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors7/Tile/multiples/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors7/Tile/multiples"
  op: "Pack"
  input: "anchors7/strided_slice"
  input: "anchors7/Tile/multiples/1"
  input: "anchors7/Tile/multiples/2"
  input: "anchors7/Tile/multiples/3"
  input: "anchors7/Tile/multiples/4"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "anchors7/Tile"
  op: "Tile"
  input: "anchors7/Const"
  input: "anchors7/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "classes_concat/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "classes_concat/concat"
  op: "ConcatV2"
  input: "classes4_reshape/Reshape"
  input: "classes5_reshape/Reshape"
  input: "classes6_reshape/Reshape"
  input: "classes7_reshape/Reshape"
  input: "classes_concat/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boxes4_reshape/Shape"
  op: "Shape"
  input: "boxes4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boxes4_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boxes4_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boxes4_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boxes4_reshape/strided_slice"
  op: "StridedSlice"
  input: "boxes4_reshape/Shape"
  input: "boxes4_reshape/strided_slice/stack"
  input: "boxes4_reshape/strided_slice/stack_1"
  input: "boxes4_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "boxes4_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boxes4_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "boxes4_reshape/Reshape/shape"
  op: "Pack"
  input: "boxes4_reshape/strided_slice"
  input: "boxes4_reshape/Reshape/shape/1"
  input: "boxes4_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boxes4_reshape/Reshape"
  op: "Reshape"
  input: "boxes4/BiasAdd"
  input: "boxes4_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boxes5_reshape/Shape"
  op: "Shape"
  input: "boxes5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boxes5_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boxes5_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boxes5_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boxes5_reshape/strided_slice"
  op: "StridedSlice"
  input: "boxes5_reshape/Shape"
  input: "boxes5_reshape/strided_slice/stack"
  input: "boxes5_reshape/strided_slice/stack_1"
  input: "boxes5_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "boxes5_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boxes5_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "boxes5_reshape/Reshape/shape"
  op: "Pack"
  input: "boxes5_reshape/strided_slice"
  input: "boxes5_reshape/Reshape/shape/1"
  input: "boxes5_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boxes5_reshape/Reshape"
  op: "Reshape"
  input: "boxes5/BiasAdd"
  input: "boxes5_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boxes6_reshape/Shape"
  op: "Shape"
  input: "boxes6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boxes6_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boxes6_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boxes6_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boxes6_reshape/strided_slice"
  op: "StridedSlice"
  input: "boxes6_reshape/Shape"
  input: "boxes6_reshape/strided_slice/stack"
  input: "boxes6_reshape/strided_slice/stack_1"
  input: "boxes6_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "boxes6_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boxes6_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "boxes6_reshape/Reshape/shape"
  op: "Pack"
  input: "boxes6_reshape/strided_slice"
  input: "boxes6_reshape/Reshape/shape/1"
  input: "boxes6_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boxes6_reshape/Reshape"
  op: "Reshape"
  input: "boxes6/BiasAdd"
  input: "boxes6_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boxes7_reshape/Shape"
  op: "Shape"
  input: "boxes7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boxes7_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boxes7_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boxes7_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boxes7_reshape/strided_slice"
  op: "StridedSlice"
  input: "boxes7_reshape/Shape"
  input: "boxes7_reshape/strided_slice/stack"
  input: "boxes7_reshape/strided_slice/stack_1"
  input: "boxes7_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "boxes7_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boxes7_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "boxes7_reshape/Reshape/shape"
  op: "Pack"
  input: "boxes7_reshape/strided_slice"
  input: "boxes7_reshape/Reshape/shape/1"
  input: "boxes7_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boxes7_reshape/Reshape"
  op: "Reshape"
  input: "boxes7/BiasAdd"
  input: "boxes7_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors4_reshape/Shape"
  op: "Shape"
  input: "anchors4/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors4_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "anchors4_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors4_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors4_reshape/strided_slice"
  op: "StridedSlice"
  input: "anchors4_reshape/Shape"
  input: "anchors4_reshape/strided_slice/stack"
  input: "anchors4_reshape/strided_slice/stack_1"
  input: "anchors4_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "anchors4_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "anchors4_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "anchors4_reshape/Reshape/shape"
  op: "Pack"
  input: "anchors4_reshape/strided_slice"
  input: "anchors4_reshape/Reshape/shape/1"
  input: "anchors4_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "anchors4_reshape/Reshape"
  op: "Reshape"
  input: "anchors4/Tile"
  input: "anchors4_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors5_reshape/Shape"
  op: "Shape"
  input: "anchors5/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors5_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "anchors5_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors5_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors5_reshape/strided_slice"
  op: "StridedSlice"
  input: "anchors5_reshape/Shape"
  input: "anchors5_reshape/strided_slice/stack"
  input: "anchors5_reshape/strided_slice/stack_1"
  input: "anchors5_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "anchors5_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "anchors5_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "anchors5_reshape/Reshape/shape"
  op: "Pack"
  input: "anchors5_reshape/strided_slice"
  input: "anchors5_reshape/Reshape/shape/1"
  input: "anchors5_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "anchors5_reshape/Reshape"
  op: "Reshape"
  input: "anchors5/Tile"
  input: "anchors5_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors6_reshape/Shape"
  op: "Shape"
  input: "anchors6/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors6_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "anchors6_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors6_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors6_reshape/strided_slice"
  op: "StridedSlice"
  input: "anchors6_reshape/Shape"
  input: "anchors6_reshape/strided_slice/stack"
  input: "anchors6_reshape/strided_slice/stack_1"
  input: "anchors6_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "anchors6_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "anchors6_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "anchors6_reshape/Reshape/shape"
  op: "Pack"
  input: "anchors6_reshape/strided_slice"
  input: "anchors6_reshape/Reshape/shape/1"
  input: "anchors6_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "anchors6_reshape/Reshape"
  op: "Reshape"
  input: "anchors6/Tile"
  input: "anchors6_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors7_reshape/Shape"
  op: "Shape"
  input: "anchors7/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors7_reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "anchors7_reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors7_reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors7_reshape/strided_slice"
  op: "StridedSlice"
  input: "anchors7_reshape/Shape"
  input: "anchors7_reshape/strided_slice/stack"
  input: "anchors7_reshape/strided_slice/stack_1"
  input: "anchors7_reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "anchors7_reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "anchors7_reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "anchors7_reshape/Reshape/shape"
  op: "Pack"
  input: "anchors7_reshape/strided_slice"
  input: "anchors7_reshape/Reshape/shape/1"
  input: "anchors7_reshape/Reshape/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "anchors7_reshape/Reshape"
  op: "Reshape"
  input: "anchors7/Tile"
  input: "anchors7_reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "classes_softmax/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "classes_softmax/Max"
  op: "Max"
  input: "classes_concat/concat"
  input: "classes_softmax/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "classes_softmax/sub"
  op: "Sub"
  input: "classes_concat/concat"
  input: "classes_softmax/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes_softmax/Exp"
  op: "Exp"
  input: "classes_softmax/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "classes_softmax/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "classes_softmax/Sum"
  op: "Sum"
  input: "classes_softmax/Exp"
  input: "classes_softmax/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "classes_softmax/truediv"
  op: "RealDiv"
  input: "classes_softmax/Exp"
  input: "classes_softmax/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "boxes_concat/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boxes_concat/concat"
  op: "ConcatV2"
  input: "boxes4_reshape/Reshape"
  input: "boxes5_reshape/Reshape"
  input: "boxes6_reshape/Reshape"
  input: "boxes7_reshape/Reshape"
  input: "boxes_concat/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "anchors_concat/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "anchors_concat/concat"
  op: "ConcatV2"
  input: "anchors4_reshape/Reshape"
  input: "anchors5_reshape/Reshape"
  input: "anchors6_reshape/Reshape"
  input: "anchors7_reshape/Reshape"
  input: "anchors_concat/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "predictions/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "predictions/concat"
  op: "ConcatV2"
  input: "classes_softmax/truediv"
  input: "boxes_concat/concat"
  input: "anchors_concat/concat"
  input: "predictions/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\364\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice/stack"
  input: "decoded_predictions/strided_slice/stack_1"
  input: "decoded_predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/ArgMax"
  op: "ArgMax"
  input: "decoded_predictions/strided_slice"
  input: "decoded_predictions/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "decoded_predictions/ToFloat"
  op: "Cast"
  input: "decoded_predictions/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "decoded_predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/ExpandDims"
  op: "ExpandDims"
  input: "decoded_predictions/ToFloat"
  input: "decoded_predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\364\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_1"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_1/stack"
  input: "decoded_predictions/strided_slice_1/stack_1"
  input: "decoded_predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/Max"
  op: "Max"
  input: "decoded_predictions/strided_slice_1"
  input: "decoded_predictions/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\364\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\365\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_2"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_2/stack"
  input: "decoded_predictions/strided_slice_2/stack_1"
  input: "decoded_predictions/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\374\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\375\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_3"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_3/stack"
  input: "decoded_predictions/strided_slice_3/stack_1"
  input: "decoded_predictions/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/mul"
  op: "Mul"
  input: "decoded_predictions/strided_slice_2"
  input: "decoded_predictions/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\372\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\373\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_4"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_4/stack"
  input: "decoded_predictions/strided_slice_4/stack_1"
  input: "decoded_predictions/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/mul_1"
  op: "Mul"
  input: "decoded_predictions/mul"
  input: "decoded_predictions/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\370\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\371\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_5"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_5/stack"
  input: "decoded_predictions/strided_slice_5/stack_1"
  input: "decoded_predictions/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/add"
  op: "Add"
  input: "decoded_predictions/mul_1"
  input: "decoded_predictions/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\365\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\366\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_6"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_6/stack"
  input: "decoded_predictions/strided_slice_6/stack_1"
  input: "decoded_predictions/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\375\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\376\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_7"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_7/stack"
  input: "decoded_predictions/strided_slice_7/stack_1"
  input: "decoded_predictions/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/mul_2"
  op: "Mul"
  input: "decoded_predictions/strided_slice_6"
  input: "decoded_predictions/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\373\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\374\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_8"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_8/stack"
  input: "decoded_predictions/strided_slice_8/stack_1"
  input: "decoded_predictions/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/mul_3"
  op: "Mul"
  input: "decoded_predictions/mul_2"
  input: "decoded_predictions/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\371\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\372\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_9"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_9/stack"
  input: "decoded_predictions/strided_slice_9/stack_1"
  input: "decoded_predictions/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/add_1"
  op: "Add"
  input: "decoded_predictions/mul_3"
  input: "decoded_predictions/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\366\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\367\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_10"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_10/stack"
  input: "decoded_predictions/strided_slice_10/stack_1"
  input: "decoded_predictions/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\376\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_11"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_11/stack"
  input: "decoded_predictions/strided_slice_11/stack_1"
  input: "decoded_predictions/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/mul_4"
  op: "Mul"
  input: "decoded_predictions/strided_slice_10"
  input: "decoded_predictions/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/Exp"
  op: "Exp"
  input: "decoded_predictions/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\372\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\373\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_12"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_12/stack"
  input: "decoded_predictions/strided_slice_12/stack_1"
  input: "decoded_predictions/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/mul_5"
  op: "Mul"
  input: "decoded_predictions/Exp"
  input: "decoded_predictions/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\367\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\370\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_13"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_13/stack"
  input: "decoded_predictions/strided_slice_13/stack_1"
  input: "decoded_predictions/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_14/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_14/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_14/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_14"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_14/stack"
  input: "decoded_predictions/strided_slice_14/stack_1"
  input: "decoded_predictions/strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/mul_6"
  op: "Mul"
  input: "decoded_predictions/strided_slice_13"
  input: "decoded_predictions/strided_slice_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/Exp_1"
  op: "Exp"
  input: "decoded_predictions/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_15/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\373\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_15/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\374\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_15/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_15"
  op: "StridedSlice"
  input: "predictions/concat"
  input: "decoded_predictions/strided_slice_15/stack"
  input: "decoded_predictions/strided_slice_15/stack_1"
  input: "decoded_predictions/strided_slice_15/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/mul_7"
  op: "Mul"
  input: "decoded_predictions/Exp_1"
  input: "decoded_predictions/strided_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/mul_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoded_predictions/mul_8"
  op: "Mul"
  input: "decoded_predictions/mul_8/x"
  input: "decoded_predictions/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/sub"
  op: "Sub"
  input: "decoded_predictions/add"
  input: "decoded_predictions/mul_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/mul_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoded_predictions/mul_9"
  op: "Mul"
  input: "decoded_predictions/mul_9/x"
  input: "decoded_predictions/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/sub_1"
  op: "Sub"
  input: "decoded_predictions/add_1"
  input: "decoded_predictions/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoded_predictions/mul_10"
  op: "Mul"
  input: "decoded_predictions/mul_10/x"
  input: "decoded_predictions/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/add_2"
  op: "Add"
  input: "decoded_predictions/add"
  input: "decoded_predictions/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/mul_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "decoded_predictions/mul_11"
  op: "Mul"
  input: "decoded_predictions/mul_11/x"
  input: "decoded_predictions/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/add_3"
  op: "Add"
  input: "decoded_predictions/add_1"
  input: "decoded_predictions/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/cond/Switch"
  op: "Switch"
  input: "normalize_coords"
  input: "normalize_coords"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/cond/switch_t"
  op: "Identity"
  input: "decoded_predictions/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/cond/switch_f"
  op: "Identity"
  input: "decoded_predictions/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/cond/pred_id"
  op: "Identity"
  input: "normalize_coords"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/cond/mul"
  op: "Mul"
  input: "decoded_predictions/cond/mul/Switch:1"
  input: "decoded_predictions/cond/mul/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/cond/mul/Switch"
  op: "Switch"
  input: "decoded_predictions/sub"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/sub"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/mul/Switch_1"
  op: "Switch"
  input: "img_width"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@img_width"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims/dim"
  op: "Const"
  input: "^decoded_predictions/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims"
  op: "ExpandDims"
  input: "decoded_predictions/cond/mul"
  input: "decoded_predictions/cond/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/cond/mul_1"
  op: "Mul"
  input: "decoded_predictions/cond/mul_1/Switch:1"
  input: "decoded_predictions/cond/mul_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/cond/mul_1/Switch"
  op: "Switch"
  input: "decoded_predictions/sub_1"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/sub_1"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/mul_1/Switch_1"
  op: "Switch"
  input: "img_height"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@img_height"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_1/dim"
  op: "Const"
  input: "^decoded_predictions/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_1"
  op: "ExpandDims"
  input: "decoded_predictions/cond/mul_1"
  input: "decoded_predictions/cond/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/cond/mul_2"
  op: "Mul"
  input: "decoded_predictions/cond/mul_2/Switch:1"
  input: "decoded_predictions/cond/mul/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/cond/mul_2/Switch"
  op: "Switch"
  input: "decoded_predictions/add_2"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/add_2"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_2/dim"
  op: "Const"
  input: "^decoded_predictions/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_2"
  op: "ExpandDims"
  input: "decoded_predictions/cond/mul_2"
  input: "decoded_predictions/cond/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/cond/mul_3"
  op: "Mul"
  input: "decoded_predictions/cond/mul_3/Switch:1"
  input: "decoded_predictions/cond/mul_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/cond/mul_3/Switch"
  op: "Switch"
  input: "decoded_predictions/add_3"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/add_3"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_3/dim"
  op: "Const"
  input: "^decoded_predictions/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_3"
  op: "ExpandDims"
  input: "decoded_predictions/cond/mul_3"
  input: "decoded_predictions/cond/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_4/dim"
  op: "Const"
  input: "^decoded_predictions/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_4"
  op: "ExpandDims"
  input: "decoded_predictions/cond/ExpandDims_4/Switch"
  input: "decoded_predictions/cond/ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_4/Switch"
  op: "Switch"
  input: "decoded_predictions/sub"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/sub"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_5/dim"
  op: "Const"
  input: "^decoded_predictions/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_5"
  op: "ExpandDims"
  input: "decoded_predictions/cond/ExpandDims_5/Switch"
  input: "decoded_predictions/cond/ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_5/Switch"
  op: "Switch"
  input: "decoded_predictions/sub_1"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/sub_1"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_6/dim"
  op: "Const"
  input: "^decoded_predictions/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_6"
  op: "ExpandDims"
  input: "decoded_predictions/cond/ExpandDims_6/Switch"
  input: "decoded_predictions/cond/ExpandDims_6/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_6/Switch"
  op: "Switch"
  input: "decoded_predictions/add_2"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/add_2"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_7/dim"
  op: "Const"
  input: "^decoded_predictions/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_7"
  op: "ExpandDims"
  input: "decoded_predictions/cond/ExpandDims_7/Switch"
  input: "decoded_predictions/cond/ExpandDims_7/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/cond/ExpandDims_7/Switch"
  op: "Switch"
  input: "decoded_predictions/add_3"
  input: "decoded_predictions/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/add_3"
      }
    }
  }
}
node {
  name: "decoded_predictions/cond/Merge"
  op: "Merge"
  input: "decoded_predictions/cond/ExpandDims_4"
  input: "decoded_predictions/cond/ExpandDims"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/cond/Merge_1"
  op: "Merge"
  input: "decoded_predictions/cond/ExpandDims_5"
  input: "decoded_predictions/cond/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/cond/Merge_2"
  op: "Merge"
  input: "decoded_predictions/cond/ExpandDims_6"
  input: "decoded_predictions/cond/ExpandDims_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/cond/Merge_3"
  op: "Merge"
  input: "decoded_predictions/cond/ExpandDims_7"
  input: "decoded_predictions/cond/ExpandDims_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/concat"
  op: "ConcatV2"
  input: "decoded_predictions/ExpandDims"
  input: "decoded_predictions/Max"
  input: "decoded_predictions/cond/Merge"
  input: "decoded_predictions/cond/Merge_1"
  input: "decoded_predictions/cond/Merge_2"
  input: "decoded_predictions/cond/Merge_3"
  input: "decoded_predictions/concat/axis"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/Shape"
  op: "Shape"
  input: "decoded_predictions/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_16/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_16/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_16/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_16"
  op: "StridedSlice"
  input: "decoded_predictions/Shape"
  input: "decoded_predictions/strided_slice_16/stack"
  input: "decoded_predictions/strided_slice_16/stack_1"
  input: "decoded_predictions/strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoded_predictions/Shape_1"
  op: "Shape"
  input: "decoded_predictions/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_17/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_17/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_17/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/strided_slice_17"
  op: "StridedSlice"
  input: "decoded_predictions/Shape_1"
  input: "decoded_predictions/strided_slice_17/stack"
  input: "decoded_predictions/strided_slice_17/stack_1"
  input: "decoded_predictions/strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoded_predictions/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoded_predictions/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/range"
  op: "Range"
  input: "decoded_predictions/range/start"
  input: "decoded_predictions/range/limit"
  input: "decoded_predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/Shape"
  op: "Shape"
  input: "decoded_predictions/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/strided_slice"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/Shape"
  input: "decoded_predictions/loop_over_batch/strided_slice/stack"
  input: "decoded_predictions/loop_over_batch/strided_slice/stack_1"
  input: "decoded_predictions/loop_over_batch/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArray"
  op: "TensorArrayV3"
  input: "decoded_predictions/loop_over_batch/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "decoded_predictions/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/TensorArrayUnstack/Shape"
  input: "decoded_predictions/loop_over_batch/TensorArrayUnstack/strided_slice/stack"
  input: "decoded_predictions/loop_over_batch/TensorArrayUnstack/strided_slice/stack_1"
  input: "decoded_predictions/loop_over_batch/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayUnstack/range"
  op: "Range"
  input: "decoded_predictions/loop_over_batch/TensorArrayUnstack/range/start"
  input: "decoded_predictions/loop_over_batch/TensorArrayUnstack/strided_slice"
  input: "decoded_predictions/loop_over_batch/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "decoded_predictions/loop_over_batch/TensorArray"
  input: "decoded_predictions/loop_over_batch/TensorArrayUnstack/range"
  input: "decoded_predictions/concat"
  input: "decoded_predictions/loop_over_batch/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/concat"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArray_1"
  op: "TensorArrayV3"
  input: "decoded_predictions/loop_over_batch/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Enter"
  op: "Enter"
  input: "decoded_predictions/loop_over_batch/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Enter_1"
  op: "Enter"
  input: "decoded_predictions/loop_over_batch/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Enter_2"
  op: "Enter"
  input: "decoded_predictions/loop_over_batch/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Merge"
  op: "Merge"
  input: "decoded_predictions/loop_over_batch/while/Enter"
  input: "decoded_predictions/loop_over_batch/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Merge_1"
  op: "Merge"
  input: "decoded_predictions/loop_over_batch/while/Enter_1"
  input: "decoded_predictions/loop_over_batch/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Merge_2"
  op: "Merge"
  input: "decoded_predictions/loop_over_batch/while/Enter_2"
  input: "decoded_predictions/loop_over_batch/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Less"
  op: "Less"
  input: "decoded_predictions/loop_over_batch/while/Merge"
  input: "decoded_predictions/loop_over_batch/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Less/Enter"
  op: "Enter"
  input: "decoded_predictions/loop_over_batch/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Less_1"
  op: "Less"
  input: "decoded_predictions/loop_over_batch/while/Merge_1"
  input: "decoded_predictions/loop_over_batch/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/LogicalAnd"
  op: "LogicalAnd"
  input: "decoded_predictions/loop_over_batch/while/Less"
  input: "decoded_predictions/loop_over_batch/while/Less_1"
}
node {
  name: "decoded_predictions/loop_over_batch/while/LoopCond"
  op: "LoopCond"
  input: "decoded_predictions/loop_over_batch/while/LogicalAnd"
}
node {
  name: "decoded_predictions/loop_over_batch/while/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/Merge"
  input: "decoded_predictions/loop_over_batch/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/Merge"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Switch_1"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/Merge_1"
  input: "decoded_predictions/loop_over_batch/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/Merge_1"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Switch_2"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/Merge_2"
  input: "decoded_predictions/loop_over_batch/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/Merge_2"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Identity"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Identity_1"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Identity_2"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/add/y"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/add"
  op: "Add"
  input: "decoded_predictions/loop_over_batch/while/Identity"
  input: "decoded_predictions/loop_over_batch/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3/Enter"
  input: "decoded_predictions/loop_over_batch/while/Identity_1"
  input: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "decoded_predictions/loop_over_batch/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "decoded_predictions/loop_over_batch/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/strided_slice/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/strided_slice/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/strided_slice/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/strided_slice"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3"
  input: "decoded_predictions/loop_over_batch/while/strided_slice/stack"
  input: "decoded_predictions/loop_over_batch/while/strided_slice/stack_1"
  input: "decoded_predictions/loop_over_batch/while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/NotEqual/y"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/NotEqual"
  op: "NotEqual"
  input: "decoded_predictions/loop_over_batch/while/strided_slice"
  input: "decoded_predictions/loop_over_batch/while/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Shape"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Shape"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice/stack"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice/stack_1"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Prod/reduction_indices"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Prod"
  op: "Prod"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Prod/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Shape_1"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_1/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Shape_1"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_1/stack"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_1/stack_1"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Shape_2"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_2/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Shape_2"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_2/stack"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_2/stack_1"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/concat/values_1"
  op: "Pack"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/concat/axis"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/concat"
  op: "ConcatV2"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_1"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/concat/values_1"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/strided_slice_2"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Reshape"
  op: "Reshape"
  input: "decoded_predictions/loop_over_batch/while/TensorArrayReadV3"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Reshape_1/shape"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "decoded_predictions/loop_over_batch/while/NotEqual"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Where"
  op: "Where"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/GatherV2/axis"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Reshape"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/Squeeze"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Size"
  op: "Size"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Equal/y"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Equal"
  op: "Equal"
  input: "decoded_predictions/loop_over_batch/while/Size"
  input: "decoded_predictions/loop_over_batch/while/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/Equal"
  input: "decoded_predictions/loop_over_batch/while/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/switch_t"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/switch_f"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/pred_id"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/Const"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/strided_slice/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/strided_slice/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/strided_slice/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/strided_slice"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond/strided_slice/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond/strided_slice/stack"
  input: "decoded_predictions/loop_over_batch/while/cond/strided_slice/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/strided_slice/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/boolean_mask/GatherV2"
  input: "decoded_predictions/loop_over_batch/while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/boolean_mask/GatherV2"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/Greater"
  op: "Greater"
  input: "decoded_predictions/loop_over_batch/while/cond/strided_slice"
  input: "decoded_predictions/loop_over_batch/while/cond/Greater/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/Greater/Enter"
  op: "Enter"
  input: "confidence_thresh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/Greater/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/cond/Greater/Enter"
  input: "decoded_predictions/loop_over_batch/while/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/cond/Greater/Enter"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Shape"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/while/cond/strided_slice/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Shape"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice/stack"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Prod/reduction_indices"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Prod"
  op: "Prod"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Prod/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Shape_1"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/while/cond/strided_slice/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_1/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Shape_1"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_1/stack"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_1/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Shape_2"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/while/cond/strided_slice/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_2/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Shape_2"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_2/stack"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_2/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/concat/values_1"
  op: "Pack"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/concat/axis"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/concat"
  op: "ConcatV2"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_1"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/concat/values_1"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/strided_slice_2"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Reshape"
  op: "Reshape"
  input: "decoded_predictions/loop_over_batch/while/cond/strided_slice/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Reshape_1/shape"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "decoded_predictions/loop_over_batch/while/cond/Greater"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Where"
  op: "Where"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/GatherV2/axis"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Reshape"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/Squeeze"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond/Merge"
  op: "Merge"
  input: "decoded_predictions/loop_over_batch/while/cond/boolean_mask/GatherV2"
  input: "decoded_predictions/loop_over_batch/while/cond/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Size_1"
  op: "Size"
  input: "decoded_predictions/loop_over_batch/while/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Equal_1/y"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Equal_1"
  op: "Equal"
  input: "decoded_predictions/loop_over_batch/while/Size_1"
  input: "decoded_predictions/loop_over_batch/while/Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/Equal_1"
  input: "decoded_predictions/loop_over_batch/while/Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/switch_t"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/pred_id"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/Const"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/stack"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/cond/Merge"
  input: "decoded_predictions/loop_over_batch/while/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/cond/Merge"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_1/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\374\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_1/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\375\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_1/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_1"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_1/stack"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_1/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims/dim"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims"
  op: "ExpandDims"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_1"
  input: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_2/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\375\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_2/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\376\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_2/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_2"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_2/stack"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_2/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_1/dim"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_1"
  op: "ExpandDims"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_2"
  input: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_3/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\376\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_3/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_3/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_3"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_3/stack"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_3/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_2/dim"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_2"
  op: "ExpandDims"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_3"
  input: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_4/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_4/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_4/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_4"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_4/stack"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_4/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_3/dim"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_3"
  op: "ExpandDims"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice_4"
  input: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/concat/axis"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/concat"
  op: "ConcatV2"
  input: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_1"
  input: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims"
  input: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_3"
  input: "decoded_predictions/loop_over_batch/while/cond_1/ExpandDims_2"
  input: "decoded_predictions/loop_over_batch/while/cond_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/iou_threshold"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.44999998807907104
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/score_threshold"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -inf
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/NonMaxSuppressionV3"
  op: "NonMaxSuppressionV3"
  input: "decoded_predictions/loop_over_batch/while/cond_1/concat"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice"
  input: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/NonMaxSuppressionV3/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/iou_threshold"
  input: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/score_threshold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/NonMaxSuppressionV3/Enter"
  op: "Enter"
  input: "nms_max_output_size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/NonMaxSuppressionV3/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/NonMaxSuppressionV3/Enter"
  input: "decoded_predictions/loop_over_batch/while/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/NonMaxSuppressionV3/Enter"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/GatherV2/axis"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/GatherV2"
  op: "GatherV2"
  input: "decoded_predictions/loop_over_batch/while/cond_1/strided_slice/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/non_maximum_suppresion/NonMaxSuppressionV3"
  input: "decoded_predictions/loop_over_batch/while/cond_1/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_1/Merge"
  op: "Merge"
  input: "decoded_predictions/loop_over_batch/while/cond_1/GatherV2"
  input: "decoded_predictions/loop_over_batch/while/cond_1/Const"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Shape"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/while/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/strided_slice_1/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/strided_slice_1/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/strided_slice_1/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/strided_slice_1"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/Shape"
  input: "decoded_predictions/loop_over_batch/while/strided_slice_1/stack"
  input: "decoded_predictions/loop_over_batch/while/strided_slice_1/stack_1"
  input: "decoded_predictions/loop_over_batch/while/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/GreaterEqual"
  op: "GreaterEqual"
  input: "decoded_predictions/loop_over_batch/while/strided_slice_1"
  input: "decoded_predictions/loop_over_batch/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/GreaterEqual/Enter"
  op: "Enter"
  input: "top_k"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/GreaterEqual"
  input: "decoded_predictions/loop_over_batch/while/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/switch_t"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/pred_id"
  op: "Identity"
  input: "decoded_predictions/loop_over_batch/while/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice/Switch:1"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice/stack"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/Merge"
  input: "decoded_predictions/loop_over_batch/while/cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/cond_1/Merge"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/TopKV2"
  op: "TopKV2"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice"
  input: "decoded_predictions/loop_over_batch/while/cond_2/TopKV2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "sorted"
    value {
      b: true
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/TopKV2/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/GreaterEqual/Enter"
  input: "decoded_predictions/loop_over_batch/while/cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/GreaterEqual/Enter"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/GatherV2/axis"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/GatherV2"
  op: "GatherV2"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice/Switch:1"
  input: "decoded_predictions/loop_over_batch/while/cond_2/TopKV2:1"
  input: "decoded_predictions/loop_over_batch/while/cond_2/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/Shape"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Shape/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/Shape/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_1/Merge"
  input: "decoded_predictions/loop_over_batch/while/cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/cond_1/Merge"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_1/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_1/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_1/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_1"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Shape"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_1/stack"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_1/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/sub"
  op: "Sub"
  input: "decoded_predictions/loop_over_batch/while/cond_2/sub/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/sub/Switch"
  op: "Switch"
  input: "decoded_predictions/loop_over_batch/while/GreaterEqual/Enter"
  input: "decoded_predictions/loop_over_batch/while/cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/GreaterEqual/Enter"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/Pad/paddings/0/0"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/Pad/paddings/0"
  op: "Pack"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Pad/paddings/0/0"
  input: "decoded_predictions/loop_over_batch/while/cond_2/sub"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/Pad/paddings/1_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/Pad/paddings"
  op: "Pack"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Pad/paddings/0"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Pad/paddings/1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/Pad"
  op: "Pad"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Shape/Switch"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_2/stack"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_2/stack_1"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_2/stack_2"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_2"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Pad"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_2/stack"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_2/stack_1"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/TopKV2_1"
  op: "TopKV2"
  input: "decoded_predictions/loop_over_batch/while/cond_2/strided_slice_2"
  input: "decoded_predictions/loop_over_batch/while/cond_2/sub/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "sorted"
    value {
      b: true
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/GatherV2_1/axis"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/cond_2/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/GatherV2_1"
  op: "GatherV2"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Pad"
  input: "decoded_predictions/loop_over_batch/while/cond_2/TopKV2_1:1"
  input: "decoded_predictions/loop_over_batch/while/cond_2/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/cond_2/Merge"
  op: "Merge"
  input: "decoded_predictions/loop_over_batch/while/cond_2/GatherV2_1"
  input: "decoded_predictions/loop_over_batch/while/cond_2/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoded_predictions/loop_over_batch/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decoded_predictions/loop_over_batch/while/Identity_1"
  input: "decoded_predictions/loop_over_batch/while/cond_2/Merge"
  input: "decoded_predictions/loop_over_batch/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/cond_2/Merge"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoded_predictions/loop_over_batch/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/while/cond_2/Merge"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoded_predictions/loop_over_batch/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 128
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/add_1/y"
  op: "Const"
  input: "^decoded_predictions/loop_over_batch/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/add_1"
  op: "Add"
  input: "decoded_predictions/loop_over_batch/while/Identity_1"
  input: "decoded_predictions/loop_over_batch/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/NextIteration"
  op: "NextIteration"
  input: "decoded_predictions/loop_over_batch/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/NextIteration_1"
  op: "NextIteration"
  input: "decoded_predictions/loop_over_batch/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/NextIteration_2"
  op: "NextIteration"
  input: "decoded_predictions/loop_over_batch/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Exit"
  op: "Exit"
  input: "decoded_predictions/loop_over_batch/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Exit_1"
  op: "Exit"
  input: "decoded_predictions/loop_over_batch/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/while/Exit_2"
  op: "Exit"
  input: "decoded_predictions/loop_over_batch/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decoded_predictions/loop_over_batch/TensorArray_1"
  input: "decoded_predictions/loop_over_batch/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/TensorArray_1"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayStack/range"
  op: "Range"
  input: "decoded_predictions/loop_over_batch/TensorArrayStack/range/start"
  input: "decoded_predictions/loop_over_batch/TensorArrayStack/TensorArraySizeV3"
  input: "decoded_predictions/loop_over_batch/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/TensorArray_1"
      }
    }
  }
}
node {
  name: "decoded_predictions/loop_over_batch/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoded_predictions/loop_over_batch/TensorArray_1"
  input: "decoded_predictions/loop_over_batch/TensorArrayStack/range"
  input: "decoded_predictions/loop_over_batch/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoded_predictions/loop_over_batch/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 6
        }
      }
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "conv2d_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "conv2d_1/bias"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "conv2d_2/kernel"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "conv2d_2/bias"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "depthwise_conv2d_1/depthwise_kernel"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "depthwise_conv2d_1/bias"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "conv2d_3/kernel"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "conv2d_3/bias"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "conv2d_4/kernel"
  input: "Placeholder_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_9"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "conv2d_4/bias"
  input: "Placeholder_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_10"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_10"
  op: "Assign"
  input: "depthwise_conv2d_2/depthwise_kernel"
  input: "Placeholder_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_11"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "Assign_11"
  op: "Assign"
  input: "depthwise_conv2d_2/bias"
  input: "Placeholder_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_12"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_12"
  op: "Assign"
  input: "conv2d_5/kernel"
  input: "Placeholder_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_13"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_13"
  op: "Assign"
  input: "conv2d_5/bias"
  input: "Placeholder_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_14"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 144
        }
      }
    }
  }
}
node {
  name: "Assign_14"
  op: "Assign"
  input: "conv2d_6/kernel"
  input: "Placeholder_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_15"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
}
node {
  name: "Assign_15"
  op: "Assign"
  input: "conv2d_6/bias"
  input: "Placeholder_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_16"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 144
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_16"
  op: "Assign"
  input: "depthwise_conv2d_3/depthwise_kernel"
  input: "Placeholder_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_17"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
}
node {
  name: "Assign_17"
  op: "Assign"
  input: "depthwise_conv2d_3/bias"
  input: "Placeholder_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_18"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 144
        }
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_18"
  op: "Assign"
  input: "conv2d_7/kernel"
  input: "Placeholder_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_19"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_19"
  op: "Assign"
  input: "conv2d_7/bias"
  input: "Placeholder_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_20"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 144
        }
      }
    }
  }
}
node {
  name: "Assign_20"
  op: "Assign"
  input: "conv2d_8/kernel"
  input: "Placeholder_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_21"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
}
node {
  name: "Assign_21"
  op: "Assign"
  input: "conv2d_8/bias"
  input: "Placeholder_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_22"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 144
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_22"
  op: "Assign"
  input: "depthwise_conv2d_4/depthwise_kernel"
  input: "Placeholder_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_23"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
}
node {
  name: "Assign_23"
  op: "Assign"
  input: "depthwise_conv2d_4/bias"
  input: "Placeholder_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_24"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 144
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_24"
  op: "Assign"
  input: "conv2d_9/kernel"
  input: "Placeholder_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_25"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_25"
  op: "Assign"
  input: "conv2d_9/bias"
  input: "Placeholder_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_26"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "Assign_26"
  op: "Assign"
  input: "conv2d_10/kernel"
  input: "Placeholder_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_27"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "Assign_27"
  op: "Assign"
  input: "conv2d_10/bias"
  input: "Placeholder_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_28"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_28"
  op: "Assign"
  input: "depthwise_conv2d_5/depthwise_kernel"
  input: "Placeholder_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_29"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "Assign_29"
  op: "Assign"
  input: "depthwise_conv2d_5/bias"
  input: "Placeholder_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_30"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_30"
  op: "Assign"
  input: "conv2d_11/kernel"
  input: "Placeholder_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_31"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_31"
  op: "Assign"
  input: "conv2d_11/bias"
  input: "Placeholder_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_32"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "Assign_32"
  op: "Assign"
  input: "conv2d_12/kernel"
  input: "Placeholder_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_33"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "Assign_33"
  op: "Assign"
  input: "conv2d_12/bias"
  input: "Placeholder_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_34"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_34"
  op: "Assign"
  input: "depthwise_conv2d_6/depthwise_kernel"
  input: "Placeholder_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_35"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "Assign_35"
  op: "Assign"
  input: "depthwise_conv2d_6/bias"
  input: "Placeholder_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_36"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_36"
  op: "Assign"
  input: "conv2d_13/kernel"
  input: "Placeholder_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_37"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "Assign_37"
  op: "Assign"
  input: "conv2d_13/bias"
  input: "Placeholder_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_38"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "Assign_38"
  op: "Assign"
  input: "conv2d_14/kernel"
  input: "Placeholder_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_39"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "Assign_39"
  op: "Assign"
  input: "conv2d_14/bias"
  input: "Placeholder_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_40"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_40"
  op: "Assign"
  input: "depthwise_conv2d_7/depthwise_kernel"
  input: "Placeholder_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_41"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
}
node {
  name: "Assign_41"
  op: "Assign"
  input: "depthwise_conv2d_7/bias"
  input: "Placeholder_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_42"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_42"
  op: "Assign"
  input: "conv2d_15/kernel"
  input: "Placeholder_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_43"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_43"
  op: "Assign"
  input: "conv2d_15/bias"
  input: "Placeholder_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_44"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_44"
  op: "Assign"
  input: "conv2d_16/kernel"
  input: "Placeholder_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_45"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_45"
  op: "Assign"
  input: "conv2d_16/bias"
  input: "Placeholder_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_46"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_46"
  op: "Assign"
  input: "depthwise_conv2d_8/depthwise_kernel"
  input: "Placeholder_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_47"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_47"
  op: "Assign"
  input: "depthwise_conv2d_8/bias"
  input: "Placeholder_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_8/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_48"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_48"
  op: "Assign"
  input: "conv2d_17/kernel"
  input: "Placeholder_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_49"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_49"
  op: "Assign"
  input: "conv2d_17/bias"
  input: "Placeholder_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_50"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_50"
  op: "Assign"
  input: "conv2d_18/kernel"
  input: "Placeholder_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_51"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_51"
  op: "Assign"
  input: "conv2d_18/bias"
  input: "Placeholder_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_52"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_52"
  op: "Assign"
  input: "depthwise_conv2d_9/depthwise_kernel"
  input: "Placeholder_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_53"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_53"
  op: "Assign"
  input: "depthwise_conv2d_9/bias"
  input: "Placeholder_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_9/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_54"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_54"
  op: "Assign"
  input: "conv2d_19/kernel"
  input: "Placeholder_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_55"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_55"
  op: "Assign"
  input: "conv2d_19/bias"
  input: "Placeholder_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_56"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_56"
  op: "Assign"
  input: "conv2d_20/kernel"
  input: "Placeholder_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_57"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_57"
  op: "Assign"
  input: "conv2d_20/bias"
  input: "Placeholder_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_58"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_58"
  op: "Assign"
  input: "depthwise_conv2d_10/depthwise_kernel"
  input: "Placeholder_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_59"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_59"
  op: "Assign"
  input: "depthwise_conv2d_10/bias"
  input: "Placeholder_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_10/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_60"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_60"
  op: "Assign"
  input: "conv2d_21/kernel"
  input: "Placeholder_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_61"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "Assign_61"
  op: "Assign"
  input: "conv2d_21/bias"
  input: "Placeholder_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_62"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_62"
  op: "Assign"
  input: "conv2d_22/kernel"
  input: "Placeholder_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_63"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_63"
  op: "Assign"
  input: "conv2d_22/bias"
  input: "Placeholder_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_64"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_64"
  op: "Assign"
  input: "depthwise_conv2d_11/depthwise_kernel"
  input: "Placeholder_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_65"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
}
node {
  name: "Assign_65"
  op: "Assign"
  input: "depthwise_conv2d_11/bias"
  input: "Placeholder_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_11/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_66"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "Assign_66"
  op: "Assign"
  input: "conv2d_23/kernel"
  input: "Placeholder_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_23/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_67"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "Assign_67"
  op: "Assign"
  input: "conv2d_23/bias"
  input: "Placeholder_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_23/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_68"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 576
        }
      }
    }
  }
}
node {
  name: "Assign_68"
  op: "Assign"
  input: "conv2d_24/kernel"
  input: "Placeholder_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_24/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_69"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
}
node {
  name: "Assign_69"
  op: "Assign"
  input: "conv2d_24/bias"
  input: "Placeholder_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_24/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_70"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 576
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_70"
  op: "Assign"
  input: "depthwise_conv2d_12/depthwise_kernel"
  input: "Placeholder_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_71"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
}
node {
  name: "Assign_71"
  op: "Assign"
  input: "depthwise_conv2d_12/bias"
  input: "Placeholder_71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_12/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_72"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "Assign_72"
  op: "Assign"
  input: "conv2d_25/kernel"
  input: "Placeholder_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_25/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_73"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "Assign_73"
  op: "Assign"
  input: "conv2d_25/bias"
  input: "Placeholder_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_25/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_74"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 576
        }
      }
    }
  }
}
node {
  name: "Assign_74"
  op: "Assign"
  input: "conv2d_26/kernel"
  input: "Placeholder_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_26/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_75"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
}
node {
  name: "Assign_75"
  op: "Assign"
  input: "conv2d_26/bias"
  input: "Placeholder_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_26/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_76"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 576
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_76"
  op: "Assign"
  input: "depthwise_conv2d_13/depthwise_kernel"
  input: "Placeholder_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_77"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
}
node {
  name: "Assign_77"
  op: "Assign"
  input: "depthwise_conv2d_13/bias"
  input: "Placeholder_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_13/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_78"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "Assign_78"
  op: "Assign"
  input: "conv2d_27/kernel"
  input: "Placeholder_78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_27/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_79"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "Assign_79"
  op: "Assign"
  input: "conv2d_27/bias"
  input: "Placeholder_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_27/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_80"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 576
        }
      }
    }
  }
}
node {
  name: "Assign_80"
  op: "Assign"
  input: "conv2d_28/kernel"
  input: "Placeholder_80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_28/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_81"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
}
node {
  name: "Assign_81"
  op: "Assign"
  input: "conv2d_28/bias"
  input: "Placeholder_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_28/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_82"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 576
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_82"
  op: "Assign"
  input: "depthwise_conv2d_14/depthwise_kernel"
  input: "Placeholder_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_83"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
}
node {
  name: "Assign_83"
  op: "Assign"
  input: "depthwise_conv2d_14/bias"
  input: "Placeholder_83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_14/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_84"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_84"
  op: "Assign"
  input: "conv2d_29/kernel"
  input: "Placeholder_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_29/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_85"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_85"
  op: "Assign"
  input: "conv2d_29/bias"
  input: "Placeholder_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_29/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_86"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 160
        }
        dim {
          size: 960
        }
      }
    }
  }
}
node {
  name: "Assign_86"
  op: "Assign"
  input: "conv2d_30/kernel"
  input: "Placeholder_86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_30/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_87"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
}
node {
  name: "Assign_87"
  op: "Assign"
  input: "conv2d_30/bias"
  input: "Placeholder_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_30/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_88"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 960
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_88"
  op: "Assign"
  input: "depthwise_conv2d_15/depthwise_kernel"
  input: "Placeholder_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_89"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
}
node {
  name: "Assign_89"
  op: "Assign"
  input: "depthwise_conv2d_15/bias"
  input: "Placeholder_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_15/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_90"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 960
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_90"
  op: "Assign"
  input: "conv2d_31/kernel"
  input: "Placeholder_90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_31/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_91"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_91"
  op: "Assign"
  input: "conv2d_31/bias"
  input: "Placeholder_91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_31/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_92"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 160
        }
        dim {
          size: 960
        }
      }
    }
  }
}
node {
  name: "Assign_92"
  op: "Assign"
  input: "conv2d_32/kernel"
  input: "Placeholder_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_32/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_93"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
}
node {
  name: "Assign_93"
  op: "Assign"
  input: "conv2d_32/bias"
  input: "Placeholder_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_32/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_94"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 960
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_94"
  op: "Assign"
  input: "depthwise_conv2d_16/depthwise_kernel"
  input: "Placeholder_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_95"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
}
node {
  name: "Assign_95"
  op: "Assign"
  input: "depthwise_conv2d_16/bias"
  input: "Placeholder_95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_16/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_96"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 960
        }
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_96"
  op: "Assign"
  input: "conv2d_33/kernel"
  input: "Placeholder_96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_33/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_97"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
}
node {
  name: "Assign_97"
  op: "Assign"
  input: "conv2d_33/bias"
  input: "Placeholder_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_33/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_98"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 160
        }
        dim {
          size: 960
        }
      }
    }
  }
}
node {
  name: "Assign_98"
  op: "Assign"
  input: "conv2d_34/kernel"
  input: "Placeholder_98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_34/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_99"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
}
node {
  name: "Assign_99"
  op: "Assign"
  input: "conv2d_34/bias"
  input: "Placeholder_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_34/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_100"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 960
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_100"
  op: "Assign"
  input: "depthwise_conv2d_17/depthwise_kernel"
  input: "Placeholder_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_101"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
}
node {
  name: "Assign_101"
  op: "Assign"
  input: "depthwise_conv2d_17/bias"
  input: "Placeholder_101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_17/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_102"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 960
        }
        dim {
          size: 320
        }
      }
    }
  }
}
node {
  name: "Assign_102"
  op: "Assign"
  input: "conv2d_35/kernel"
  input: "Placeholder_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_35/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_103"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
      }
    }
  }
}
node {
  name: "Assign_103"
  op: "Assign"
  input: "conv2d_35/bias"
  input: "Placeholder_103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_35/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_104"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_104"
  op: "Assign"
  input: "classes4/kernel"
  input: "Placeholder_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_105"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_105"
  op: "Assign"
  input: "classes4/bias"
  input: "Placeholder_105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_106"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_106"
  op: "Assign"
  input: "classes5/kernel"
  input: "Placeholder_106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_107"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_107"
  op: "Assign"
  input: "classes5/bias"
  input: "Placeholder_107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_108"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 160
        }
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_108"
  op: "Assign"
  input: "classes6/kernel"
  input: "Placeholder_108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_109"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_109"
  op: "Assign"
  input: "classes6/bias"
  input: "Placeholder_109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_110"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 320
        }
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_110"
  op: "Assign"
  input: "classes7/kernel"
  input: "Placeholder_110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes7/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_111"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
}
node {
  name: "Assign_111"
  op: "Assign"
  input: "classes7/bias"
  input: "Placeholder_111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_112"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_112"
  op: "Assign"
  input: "boxes4/kernel"
  input: "Placeholder_112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_113"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_113"
  op: "Assign"
  input: "boxes4/bias"
  input: "Placeholder_113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_114"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_114"
  op: "Assign"
  input: "boxes5/kernel"
  input: "Placeholder_114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes5/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_115"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_115"
  op: "Assign"
  input: "boxes5/bias"
  input: "Placeholder_115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes5/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_116"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 160
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_116"
  op: "Assign"
  input: "boxes6/kernel"
  input: "Placeholder_116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes6/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_117"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_117"
  op: "Assign"
  input: "boxes6/bias"
  input: "Placeholder_117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes6/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_118"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 320
        }
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_118"
  op: "Assign"
  input: "boxes7/kernel"
  input: "Placeholder_118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes7/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_119"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
}
node {
  name: "Assign_119"
  op: "Assign"
  input: "boxes7/bias"
  input: "Placeholder_119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes7/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "conv2d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv2d_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv2d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv2d_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_1/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "conv2d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "conv2d_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "conv2d_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "conv2d_4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_2/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "conv2d_5/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "conv2d_5/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "conv2d_6/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "conv2d_6/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_3/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "conv2d_7/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "conv2d_7/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "conv2d_8/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "conv2d_8/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_8/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_4/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "conv2d_9/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "conv2d_9/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_9/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "conv2d_10/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "conv2d_10/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_10/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_5/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_5/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "conv2d_11/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "conv2d_11/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_11/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "conv2d_12/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "conv2d_12/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_12/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_6/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_6/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "conv2d_13/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "conv2d_13/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_13/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "conv2d_14/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "conv2d_14/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_14/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_7/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_7/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "conv2d_15/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "conv2d_15/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_15/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "conv2d_16/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "conv2d_16/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_16/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_8/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_8/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_8/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "conv2d_17/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "conv2d_17/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_17/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "conv2d_18/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "conv2d_18/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_18/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_9/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_9/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_9/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "conv2d_19/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "conv2d_19/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_19/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "conv2d_20/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "conv2d_20/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_20/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_10/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_10/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_10/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "conv2d_21/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "conv2d_21/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "conv2d_22/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "conv2d_22/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_11/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_11/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_11/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "conv2d_23/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_23/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "conv2d_23/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_23/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "conv2d_24/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_24/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "conv2d_24/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_24/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_12/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_12/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_12/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "conv2d_25/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_25/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "conv2d_25/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_25/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "conv2d_26/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_26/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "conv2d_26/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_26/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_13/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_13/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_13/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "conv2d_27/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_27/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "conv2d_27/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_27/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "conv2d_28/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_28/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "conv2d_28/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_28/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_14/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_14/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_14/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "conv2d_29/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_29/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "conv2d_29/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_29/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "conv2d_30/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_30/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_87"
  op: "IsVariableInitialized"
  input: "conv2d_30/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_30/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_88"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_15/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_89"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_15/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_15/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_90"
  op: "IsVariableInitialized"
  input: "conv2d_31/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_31/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_91"
  op: "IsVariableInitialized"
  input: "conv2d_31/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_31/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_92"
  op: "IsVariableInitialized"
  input: "conv2d_32/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_32/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_93"
  op: "IsVariableInitialized"
  input: "conv2d_32/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_32/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_94"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_16/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_95"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_16/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_16/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_96"
  op: "IsVariableInitialized"
  input: "conv2d_33/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_33/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_97"
  op: "IsVariableInitialized"
  input: "conv2d_33/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_33/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_98"
  op: "IsVariableInitialized"
  input: "conv2d_34/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_34/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_99"
  op: "IsVariableInitialized"
  input: "conv2d_34/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_34/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_100"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_17/depthwise_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_101"
  op: "IsVariableInitialized"
  input: "depthwise_conv2d_17/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_17/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_102"
  op: "IsVariableInitialized"
  input: "conv2d_35/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_35/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_103"
  op: "IsVariableInitialized"
  input: "conv2d_35/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_35/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_104"
  op: "IsVariableInitialized"
  input: "classes4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_105"
  op: "IsVariableInitialized"
  input: "classes4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_106"
  op: "IsVariableInitialized"
  input: "classes5/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_107"
  op: "IsVariableInitialized"
  input: "classes5/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_108"
  op: "IsVariableInitialized"
  input: "classes6/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_109"
  op: "IsVariableInitialized"
  input: "classes6/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_110"
  op: "IsVariableInitialized"
  input: "classes7/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_111"
  op: "IsVariableInitialized"
  input: "classes7/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@classes7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_112"
  op: "IsVariableInitialized"
  input: "boxes4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_113"
  op: "IsVariableInitialized"
  input: "boxes4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_114"
  op: "IsVariableInitialized"
  input: "boxes5/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_115"
  op: "IsVariableInitialized"
  input: "boxes5/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes5/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_116"
  op: "IsVariableInitialized"
  input: "boxes6/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_117"
  op: "IsVariableInitialized"
  input: "boxes6/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes6/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_118"
  op: "IsVariableInitialized"
  input: "boxes7/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_119"
  op: "IsVariableInitialized"
  input: "boxes7/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boxes7/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^boxes4/bias/Assign"
  input: "^boxes4/kernel/Assign"
  input: "^boxes5/bias/Assign"
  input: "^boxes5/kernel/Assign"
  input: "^boxes6/bias/Assign"
  input: "^boxes6/kernel/Assign"
  input: "^boxes7/bias/Assign"
  input: "^boxes7/kernel/Assign"
  input: "^classes4/bias/Assign"
  input: "^classes4/kernel/Assign"
  input: "^classes5/bias/Assign"
  input: "^classes5/kernel/Assign"
  input: "^classes6/bias/Assign"
  input: "^classes6/kernel/Assign"
  input: "^classes7/bias/Assign"
  input: "^classes7/kernel/Assign"
  input: "^conv2d_1/bias/Assign"
  input: "^conv2d_1/kernel/Assign"
  input: "^conv2d_10/bias/Assign"
  input: "^conv2d_10/kernel/Assign"
  input: "^conv2d_11/bias/Assign"
  input: "^conv2d_11/kernel/Assign"
  input: "^conv2d_12/bias/Assign"
  input: "^conv2d_12/kernel/Assign"
  input: "^conv2d_13/bias/Assign"
  input: "^conv2d_13/kernel/Assign"
  input: "^conv2d_14/bias/Assign"
  input: "^conv2d_14/kernel/Assign"
  input: "^conv2d_15/bias/Assign"
  input: "^conv2d_15/kernel/Assign"
  input: "^conv2d_16/bias/Assign"
  input: "^conv2d_16/kernel/Assign"
  input: "^conv2d_17/bias/Assign"
  input: "^conv2d_17/kernel/Assign"
  input: "^conv2d_18/bias/Assign"
  input: "^conv2d_18/kernel/Assign"
  input: "^conv2d_19/bias/Assign"
  input: "^conv2d_19/kernel/Assign"
  input: "^conv2d_2/bias/Assign"
  input: "^conv2d_2/kernel/Assign"
  input: "^conv2d_20/bias/Assign"
  input: "^conv2d_20/kernel/Assign"
  input: "^conv2d_21/bias/Assign"
  input: "^conv2d_21/kernel/Assign"
  input: "^conv2d_22/bias/Assign"
  input: "^conv2d_22/kernel/Assign"
  input: "^conv2d_23/bias/Assign"
  input: "^conv2d_23/kernel/Assign"
  input: "^conv2d_24/bias/Assign"
  input: "^conv2d_24/kernel/Assign"
  input: "^conv2d_25/bias/Assign"
  input: "^conv2d_25/kernel/Assign"
  input: "^conv2d_26/bias/Assign"
  input: "^conv2d_26/kernel/Assign"
  input: "^conv2d_27/bias/Assign"
  input: "^conv2d_27/kernel/Assign"
  input: "^conv2d_28/bias/Assign"
  input: "^conv2d_28/kernel/Assign"
  input: "^conv2d_29/bias/Assign"
  input: "^conv2d_29/kernel/Assign"
  input: "^conv2d_3/bias/Assign"
  input: "^conv2d_3/kernel/Assign"
  input: "^conv2d_30/bias/Assign"
  input: "^conv2d_30/kernel/Assign"
  input: "^conv2d_31/bias/Assign"
  input: "^conv2d_31/kernel/Assign"
  input: "^conv2d_32/bias/Assign"
  input: "^conv2d_32/kernel/Assign"
  input: "^conv2d_33/bias/Assign"
  input: "^conv2d_33/kernel/Assign"
  input: "^conv2d_34/bias/Assign"
  input: "^conv2d_34/kernel/Assign"
  input: "^conv2d_35/bias/Assign"
  input: "^conv2d_35/kernel/Assign"
  input: "^conv2d_4/bias/Assign"
  input: "^conv2d_4/kernel/Assign"
  input: "^conv2d_5/bias/Assign"
  input: "^conv2d_5/kernel/Assign"
  input: "^conv2d_6/bias/Assign"
  input: "^conv2d_6/kernel/Assign"
  input: "^conv2d_7/bias/Assign"
  input: "^conv2d_7/kernel/Assign"
  input: "^conv2d_8/bias/Assign"
  input: "^conv2d_8/kernel/Assign"
  input: "^conv2d_9/bias/Assign"
  input: "^conv2d_9/kernel/Assign"
  input: "^depthwise_conv2d_1/bias/Assign"
  input: "^depthwise_conv2d_1/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_10/bias/Assign"
  input: "^depthwise_conv2d_10/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_11/bias/Assign"
  input: "^depthwise_conv2d_11/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_12/bias/Assign"
  input: "^depthwise_conv2d_12/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_13/bias/Assign"
  input: "^depthwise_conv2d_13/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_14/bias/Assign"
  input: "^depthwise_conv2d_14/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_15/bias/Assign"
  input: "^depthwise_conv2d_15/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_16/bias/Assign"
  input: "^depthwise_conv2d_16/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_17/bias/Assign"
  input: "^depthwise_conv2d_17/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_2/bias/Assign"
  input: "^depthwise_conv2d_2/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_3/bias/Assign"
  input: "^depthwise_conv2d_3/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_4/bias/Assign"
  input: "^depthwise_conv2d_4/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_5/bias/Assign"
  input: "^depthwise_conv2d_5/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_6/bias/Assign"
  input: "^depthwise_conv2d_6/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_7/bias/Assign"
  input: "^depthwise_conv2d_7/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_8/bias/Assign"
  input: "^depthwise_conv2d_8/depthwise_kernel/Assign"
  input: "^depthwise_conv2d_9/bias/Assign"
  input: "^depthwise_conv2d_9/depthwise_kernel/Assign"
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "decoded_predictions_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "decoded_predictions_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Shape"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice"
  op: "StridedSlice"
  input: "loss/decoded_predictions_loss/Shape"
  input: "loss/decoded_predictions_loss/strided_slice/stack"
  input: "loss/decoded_predictions_loss/strided_slice/stack_1"
  input: "loss/decoded_predictions_loss/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Shape_1"
  op: "Shape"
  input: "decoded_predictions/loop_over_batch/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_1"
  op: "StridedSlice"
  input: "loss/decoded_predictions_loss/Shape_1"
  input: "loss/decoded_predictions_loss/strided_slice_1/stack"
  input: "loss/decoded_predictions_loss/strided_slice_1/stack_1"
  input: "loss/decoded_predictions_loss/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\364\377\377\377"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_2"
  op: "StridedSlice"
  input: "decoded_predictions_target"
  input: "loss/decoded_predictions_loss/strided_slice_2/stack"
  input: "loss/decoded_predictions_loss/strided_slice_2/stack_1"
  input: "loss/decoded_predictions_loss/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\364\377\377\377"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_3"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/TensorArrayStack/TensorArrayGatherV3"
  input: "loss/decoded_predictions_loss/strided_slice_3/stack"
  input: "loss/decoded_predictions_loss/strided_slice_3/stack_1"
  input: "loss/decoded_predictions_loss/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000036274937e-15
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Maximum"
  op: "Maximum"
  input: "loss/decoded_predictions_loss/strided_slice_3"
  input: "loss/decoded_predictions_loss/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Log"
  op: "Log"
  input: "loss/decoded_predictions_loss/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul"
  op: "Mul"
  input: "loss/decoded_predictions_loss/strided_slice_2"
  input: "loss/decoded_predictions_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Sum"
  op: "Sum"
  input: "loss/decoded_predictions_loss/mul"
  input: "loss/decoded_predictions_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Neg"
  op: "Neg"
  input: "loss/decoded_predictions_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\364\377\377\377"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\370\377\377\377"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_4"
  op: "StridedSlice"
  input: "decoded_predictions_target"
  input: "loss/decoded_predictions_loss/strided_slice_4/stack"
  input: "loss/decoded_predictions_loss/strided_slice_4/stack_1"
  input: "loss/decoded_predictions_loss/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\364\377\377\377"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\370\377\377\377"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_5"
  op: "StridedSlice"
  input: "decoded_predictions/loop_over_batch/TensorArrayStack/TensorArrayGatherV3"
  input: "loss/decoded_predictions_loss/strided_slice_5/stack"
  input: "loss/decoded_predictions_loss/strided_slice_5/stack_1"
  input: "loss/decoded_predictions_loss/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/sub"
  op: "Sub"
  input: "loss/decoded_predictions_loss/strided_slice_4"
  input: "loss/decoded_predictions_loss/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Abs"
  op: "Abs"
  input: "loss/decoded_predictions_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/sub_1"
  op: "Sub"
  input: "loss/decoded_predictions_loss/strided_slice_4"
  input: "loss/decoded_predictions_loss/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/pow"
  op: "Pow"
  input: "loss/decoded_predictions_loss/sub_1"
  input: "loss/decoded_predictions_loss/pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul_1"
  op: "Mul"
  input: "loss/decoded_predictions_loss/mul_1/x"
  input: "loss/decoded_predictions_loss/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Less"
  op: "Less"
  input: "loss/decoded_predictions_loss/Abs"
  input: "loss/decoded_predictions_loss/Less/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/sub_2"
  op: "Sub"
  input: "loss/decoded_predictions_loss/Abs"
  input: "loss/decoded_predictions_loss/sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Select"
  op: "Select"
  input: "loss/decoded_predictions_loss/Less"
  input: "loss/decoded_predictions_loss/mul_1"
  input: "loss/decoded_predictions_loss/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Sum_1"
  op: "Sum"
  input: "loss/decoded_predictions_loss/Select"
  input: "loss/decoded_predictions_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_6"
  op: "StridedSlice"
  input: "decoded_predictions_target"
  input: "loss/decoded_predictions_loss/strided_slice_6/stack"
  input: "loss/decoded_predictions_loss/strided_slice_6/stack_1"
  input: "loss/decoded_predictions_loss/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 4
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\364\377\377\377"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/strided_slice_7"
  op: "StridedSlice"
  input: "decoded_predictions_target"
  input: "loss/decoded_predictions_loss/strided_slice_7/stack"
  input: "loss/decoded_predictions_loss/strided_slice_7/stack_1"
  input: "loss/decoded_predictions_loss/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Max"
  op: "Max"
  input: "loss/decoded_predictions_loss/strided_slice_7"
  input: "loss/decoded_predictions_loss/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Sum_2"
  op: "Sum"
  input: "loss/decoded_predictions_loss/Max"
  input: "loss/decoded_predictions_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul_2"
  op: "Mul"
  input: "loss/decoded_predictions_loss/Neg"
  input: "loss/decoded_predictions_loss/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Sum_3/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Sum_3"
  op: "Sum"
  input: "loss/decoded_predictions_loss/mul_2"
  input: "loss/decoded_predictions_loss/Sum_3/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul_3"
  op: "Mul"
  input: "loss/decoded_predictions_loss/Neg"
  input: "loss/decoded_predictions_loss/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/count_nonzero/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "loss/decoded_predictions_loss/mul_3"
  input: "loss/decoded_predictions_loss/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/count_nonzero/ToInt64"
  op: "Cast"
  input: "loss/decoded_predictions_loss/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/count_nonzero/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/count_nonzero/Sum"
  op: "Sum"
  input: "loss/decoded_predictions_loss/count_nonzero/ToInt64"
  input: "loss/decoded_predictions_loss/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/count_nonzero/Cast"
  op: "Cast"
  input: "loss/decoded_predictions_loss/count_nonzero/Sum"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/ToInt32"
  op: "Cast"
  input: "loss/decoded_predictions_loss/Sum_2"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul_4"
  op: "Mul"
  input: "loss/decoded_predictions_loss/Const"
  input: "loss/decoded_predictions_loss/ToInt32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Maximum_1"
  op: "Maximum"
  input: "loss/decoded_predictions_loss/mul_4"
  input: "loss/decoded_predictions_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Minimum"
  op: "Minimum"
  input: "loss/decoded_predictions_loss/Maximum_1"
  input: "loss/decoded_predictions_loss/count_nonzero/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Equal"
  op: "Equal"
  input: "loss/decoded_predictions_loss/count_nonzero/Cast"
  input: "loss/decoded_predictions_loss/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Switch"
  op: "Switch"
  input: "loss/decoded_predictions_loss/Equal"
  input: "loss/decoded_predictions_loss/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/switch_t"
  op: "Identity"
  input: "loss/decoded_predictions_loss/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/switch_f"
  op: "Identity"
  input: "loss/decoded_predictions_loss/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/pred_id"
  op: "Identity"
  input: "loss/decoded_predictions_loss/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/zeros/Less/y"
  op: "Const"
  input: "^loss/decoded_predictions_loss/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/zeros/Less"
  op: "Less"
  input: "loss/decoded_predictions_loss/cond/zeros/Less/Switch:1"
  input: "loss/decoded_predictions_loss/cond/zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/zeros/Less/Switch"
  op: "Switch"
  input: "loss/decoded_predictions_loss/strided_slice"
  input: "loss/decoded_predictions_loss/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/decoded_predictions_loss/strided_slice"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/zeros/packed"
  op: "Pack"
  input: "loss/decoded_predictions_loss/cond/zeros/Less/Switch:1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/zeros/Const"
  op: "Const"
  input: "^loss/decoded_predictions_loss/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/zeros"
  op: "Fill"
  input: "loss/decoded_predictions_loss/cond/zeros/packed"
  input: "loss/decoded_predictions_loss/cond/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Reshape/shape"
  op: "Const"
  input: "^loss/decoded_predictions_loss/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Reshape"
  op: "Reshape"
  input: "loss/decoded_predictions_loss/cond/Reshape/Switch"
  input: "loss/decoded_predictions_loss/cond/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Reshape/Switch"
  op: "Switch"
  input: "loss/decoded_predictions_loss/mul_3"
  input: "loss/decoded_predictions_loss/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/decoded_predictions_loss/mul_3"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/TopKV2"
  op: "TopKV2"
  input: "loss/decoded_predictions_loss/cond/Reshape"
  input: "loss/decoded_predictions_loss/cond/TopKV2/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "sorted"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/TopKV2/Switch"
  op: "Switch"
  input: "loss/decoded_predictions_loss/Minimum"
  input: "loss/decoded_predictions_loss/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/decoded_predictions_loss/Minimum"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/ExpandDims/dim"
  op: "Const"
  input: "^loss/decoded_predictions_loss/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/ExpandDims"
  op: "ExpandDims"
  input: "loss/decoded_predictions_loss/cond/TopKV2:1"
  input: "loss/decoded_predictions_loss/cond/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/ones_like/Shape"
  op: "Shape"
  input: "loss/decoded_predictions_loss/cond/TopKV2:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/ones_like/Const"
  op: "Const"
  input: "^loss/decoded_predictions_loss/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/ones_like"
  op: "Fill"
  input: "loss/decoded_predictions_loss/cond/ones_like/Shape"
  input: "loss/decoded_predictions_loss/cond/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Shape"
  op: "Shape"
  input: "loss/decoded_predictions_loss/cond/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/ScatterNd"
  op: "ScatterNd"
  input: "loss/decoded_predictions_loss/cond/ExpandDims"
  input: "loss/decoded_predictions_loss/cond/ones_like"
  input: "loss/decoded_predictions_loss/cond/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Reshape_1/shape"
  op: "Pack"
  input: "loss/decoded_predictions_loss/cond/Reshape_1/shape/Switch"
  input: "loss/decoded_predictions_loss/cond/Reshape_1/shape/Switch_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Reshape_1/shape/Switch"
  op: "Switch"
  input: "loss/decoded_predictions_loss/strided_slice"
  input: "loss/decoded_predictions_loss/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/decoded_predictions_loss/strided_slice"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Reshape_1/shape/Switch_1"
  op: "Switch"
  input: "loss/decoded_predictions_loss/strided_slice_1"
  input: "loss/decoded_predictions_loss/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/decoded_predictions_loss/strided_slice_1"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Reshape_1"
  op: "Reshape"
  input: "loss/decoded_predictions_loss/cond/ScatterNd"
  input: "loss/decoded_predictions_loss/cond/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/ToFloat"
  op: "Cast"
  input: "loss/decoded_predictions_loss/cond/Reshape_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/mul"
  op: "Mul"
  input: "loss/decoded_predictions_loss/cond/mul/Switch"
  input: "loss/decoded_predictions_loss/cond/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/mul/Switch"
  op: "Switch"
  input: "loss/decoded_predictions_loss/Neg"
  input: "loss/decoded_predictions_loss/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/decoded_predictions_loss/Neg"
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Sum/reduction_indices"
  op: "Const"
  input: "^loss/decoded_predictions_loss/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Sum"
  op: "Sum"
  input: "loss/decoded_predictions_loss/cond/mul"
  input: "loss/decoded_predictions_loss/cond/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/cond/Merge"
  op: "Merge"
  input: "loss/decoded_predictions_loss/cond/Sum"
  input: "loss/decoded_predictions_loss/cond/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/add"
  op: "Add"
  input: "loss/decoded_predictions_loss/Sum_3"
  input: "loss/decoded_predictions_loss/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul_5"
  op: "Mul"
  input: "loss/decoded_predictions_loss/Sum_1"
  input: "loss/decoded_predictions_loss/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Sum_4/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Sum_4"
  op: "Sum"
  input: "loss/decoded_predictions_loss/mul_5"
  input: "loss/decoded_predictions_loss/Sum_4/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul_6"
  op: "Mul"
  input: "loss/decoded_predictions_loss/Const_2"
  input: "loss/decoded_predictions_loss/Sum_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/add_1"
  op: "Add"
  input: "loss/decoded_predictions_loss/add"
  input: "loss/decoded_predictions_loss/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Maximum_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Maximum_2"
  op: "Maximum"
  input: "loss/decoded_predictions_loss/Maximum_2/x"
  input: "loss/decoded_predictions_loss/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/truediv"
  op: "RealDiv"
  input: "loss/decoded_predictions_loss/add_1"
  input: "loss/decoded_predictions_loss/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/ToFloat"
  op: "Cast"
  input: "loss/decoded_predictions_loss/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul_7"
  op: "Mul"
  input: "loss/decoded_predictions_loss/truediv"
  input: "loss/decoded_predictions_loss/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Mean"
  op: "Mean"
  input: "loss/decoded_predictions_loss/mul_7"
  input: "loss/decoded_predictions_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/mul_8"
  op: "Mul"
  input: "loss/decoded_predictions_loss/Mean"
  input: "decoded_predictions_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/NotEqual"
  op: "NotEqual"
  input: "decoded_predictions_sample_weights"
  input: "loss/decoded_predictions_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Cast"
  op: "Cast"
  input: "loss/decoded_predictions_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Mean_1"
  op: "Mean"
  input: "loss/decoded_predictions_loss/Cast"
  input: "loss/decoded_predictions_loss/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/truediv_1"
  op: "RealDiv"
  input: "loss/decoded_predictions_loss/mul_8"
  input: "loss/decoded_predictions_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/decoded_predictions_loss/Mean_2"
  op: "Mean"
  input: "loss/decoded_predictions_loss/truediv_1"
  input: "loss/decoded_predictions_loss/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/decoded_predictions_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_120"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_121"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_122"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_123"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_124"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
}
versions {
  producer: 27
}
